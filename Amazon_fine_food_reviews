{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LSTM on Amazon fine food reviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "furhkKqE5k3y"
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "RZOReGTOsT8P"
   },
   "outputs": [],
   "source": [
    "import sqlite3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>1. Reading dataset</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-QnruC42sI5D"
   },
   "outputs": [],
   "source": [
    "downloaded = drive.CreateFile({'id':id}) \n",
    "downloaded.GetContentFile('final.sqlite') \n",
    "conn = sqlite3.connect('final.sqlite')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "_MR3LrJrsanU"
   },
   "outputs": [],
   "source": [
    "c = conn.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mtos3hq1uAtB"
   },
   "outputs": [],
   "source": [
    "link2=\"https://drive.google.com/open?id=1ikpehnH7UMKa6ZTDToua0wU2QAiXdVa5\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "ySLlaJdXwOqL",
    "outputId": "788e989c-2c36-49f2-b847-945eaf2fb69b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1ikpehnH7UMKa6ZTDToua0wU2QAiXdVa5\n"
     ]
    }
   ],
   "source": [
    "fluff, id = link2.split('=')\n",
    "print (id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "yFDrzPaswS3E"
   },
   "outputs": [],
   "source": [
    "downloaded = drive.CreateFile({'id':id}) \n",
    "downloaded.GetContentFile('Reviews.csv')  \n",
    "df3 = pd.read_csv('Reviews.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "J5jXdDVoxCK5"
   },
   "outputs": [],
   "source": [
    "df=pd.read_sql_query(\"\"\"\n",
    "SELECT * FROM Reviews WHERE Score != 3 LIMIT 100000\n",
    "\"\"\",conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "nenF0Z54xvkC"
   },
   "outputs": [],
   "source": [
    "final=df.sort_values(\"Time\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "VPJKqNlLiG6I",
    "outputId": "c45426c1-e43d-4b6f-803f-b9aeaa5ebebd"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100000, 12)"
      ]
     },
     "execution_count": 16,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "m3wtTtFdx9MZ"
   },
   "outputs": [],
   "source": [
    "df=final[['Time','Text','CleanedText']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 68
    },
    "colab_type": "code",
    "id": "4-QMcjXCyAbB",
    "outputId": "4b79bde9-e46d-41b3-bd17-3ba0b3e8d683"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    85197\n",
      "0    14803\n",
      "Name: Score, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(final['Score'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>2. Train Test split</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "r_-Zz5fjW2cI"
   },
   "outputs": [],
   "source": [
    "X_train=df.iloc[:70000,:]\n",
    "X_test=df.iloc[70001:,]\n",
    "y_train=final.iloc[:70000,final.columns.get_loc(\"Score\")]\n",
    "y_test=final.iloc[70001:,final.columns.get_loc(\"Score\")]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>3.Data Preprocessing</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "0FjHteb5ubna"
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 51
    },
    "colab_type": "code",
    "id": "Yej93TWGvVUa",
    "outputId": "d1fcbde6-3289-4ba3-9bbc-eeabb6863ec4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<70000x31484 sparse matrix of type '<class 'numpy.int64'>'\n",
       "\twith 2115248 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 21,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vectorizer = CountVectorizer()\n",
    "vectorizer.fit_transform(X_train['CleanedText'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Converting the text data to vectors with Bag of Words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "7o_ZDucIXsKf"
   },
   "outputs": [],
   "source": [
    "dictofwords=vectorizer.vocabulary_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">We have a attribute like vocabulary_ which gives the count of the word repeated in\n",
    "text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "YidWjFZ2X61P",
    "outputId": "2a47d1ff-c164-48a2-c446-59b0aaa9c21d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict"
      ]
     },
     "execution_count": 23,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(dictofwords)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "XU9URSdtJ4A9",
    "outputId": "64f8d17a-bef3-4272-e2d4-5f6e3e9fca7a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "31484"
      ]
     },
     "execution_count": 24,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dictofwords)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YOqWUs-fcld4"
   },
   "outputs": [],
   "source": [
    "import operator\n",
    "sorted_by_value = dict(sorted(dictofwords.items(), key=operator.itemgetter(0), reverse=True))\n",
    "\n",
    "rank = 0\n",
    "last_value = len(dictofwords)\n",
    "ranked_dict = dict()\n",
    "for name in sorted_by_value:\n",
    "    this_value = dictofwords[name]\n",
    "    if this_value != last_value:\n",
    "        rank += 1\n",
    "    ranked_dict[name] = rank\n",
    "    last_value = this_value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">https://stackoverflow.com/questions/23641054/adding-a-rank-to-a-dict-in-python <br>\n",
    ">Adding the ranks to a dict value reference the above link"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "uYvKQeEmmO4L"
   },
   "outputs": [],
   "source": [
    "final_train=[]\n",
    "\n",
    "i=0;\n",
    "for i in X_train.CleanedText:\n",
    "    i=i.split()\n",
    "    addranks=[]\n",
    "    for j in i:\n",
    "        add=ranked_dict.get(j,0) #https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.get.html\n",
    "        addranks.append(add)\n",
    "    final_train.append(addranks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "NMKV22wdm5Qy"
   },
   "outputs": [],
   "source": [
    "final_test=[]\n",
    "\n",
    "i=0;\n",
    "for i in X_test.CleanedText:\n",
    "    i=i.split()\n",
    "    addranks=[]\n",
    "    for j in i:\n",
    "        add=ranked_dict.get(j,0) #https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.get.html\n",
    "        addranks.append(add)\n",
    "    final_test.append(addranks)\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">Adding the ranks of train data to the train as well as test dataset is to avoid data leakage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 68
    },
    "colab_type": "code",
    "id": "gO-oaoTNl-7Z",
    "outputId": "0f78b651-d19b-4823-ce07-47ec4bd201ad"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30    rememb see show air televis year ago child sis...\n",
      "Name: CleanedText, dtype: object\n",
      "[29136, 1113, 490, 13578, 22252, 22193, 31258, 5760, 22953, 24347, 26464, 1623, 13578]\n"
     ]
    }
   ],
   "source": [
    "print(X_train.CleanedText[1:2])\n",
    "print(final_train[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 88
    },
    "colab_type": "code",
    "id": "3qmN351am0Hs",
    "outputId": "59870f80-8e8b-4a47-afdf-2df99c0a468f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30320    look various litter option environment friend ...\n",
      "Name: CleanedText, dtype: object\n",
      "[17246, 22621, 20547, 7727, 28963, 17246, 3060, 21855, 19059, 18967, 30281, 3060, 10306, 308, 15385, 5058, 5651, 23511, 16053, 20547, 7727, 10306, 23585, 7183, 4055, 12227, 22621, 10306]\n"
     ]
    }
   ],
   "source": [
    "print(X_test.CleanedText[:1])\n",
    "print(final_test[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>4. Machine Learning Model</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "BL1elSzMm6iI",
    "outputId": "42873984-942a-46e8-f5ff-f9a2742a10a4"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout\n",
    "from keras.layers import LSTM\n",
    "from keras.layers.embeddings import Embedding\n",
    "from keras.preprocessing import sequence\n",
    "# fix random seed for reproducibility\n",
    "np.random.seed(7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 476
    },
    "colab_type": "code",
    "id": "fncIvf2PovHO",
    "outputId": "bd97554b-6a2e-48d7-8fa6-8de605a89ea5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(70000, 300)\n",
      "[    0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0     0     0     0     0     0     0\n",
      "     0     0     0     0     0     0  8614  7196  6695 30942  4082   349\n",
      " 31002 26644  6489 16108 28334 24636  3749  5992  2009  7035 28413  5972\n",
      "  5063  4164  9997  2816   907  7403  9494 30720 28413 26638  3181 15604]\n",
      "(29999, 300)\n"
     ]
    }
   ],
   "source": [
    "# truncate and/or pad input sequences\n",
    "max_review_length = 300\n",
    "X_train = sequence.pad_sequences(final_train, maxlen=max_review_length)\n",
    "X_test = sequence.pad_sequences(final_test, maxlen=max_review_length)\n",
    "\n",
    "print(X_train.shape)\n",
    "print(X_train[1])\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">We add padding because if the datapoints have different sizes so we cannot perform\n",
    "batch wise LSTM. So, if we add padding values we can form Batch wise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "SSnbLmCWqCqc"
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('classic')\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "def plt_dynamic(x, vy, ty, ax, colors=['b']):\n",
    "    ax.plot(x, vy, 'b', label=\"Validation Loss\")\n",
    "    ax.plot(x, ty, 'r', label=\"Train Loss\")\n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    fig.canvas.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 326
    },
    "colab_type": "code",
    "id": "3QegqsjNo8SS",
    "outputId": "560761f5-1110-48a9-c65f-71051a3c3157"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_1 (Embedding)      (None, 600, 100)          7000000   \n",
      "_________________________________________________________________\n",
      "lstm_1 (LSTM)                (None, 100)               80400     \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1)                 101       \n",
      "=================================================================\n",
      "Total params: 7,080,501\n",
      "Trainable params: 7,080,501\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# create the model\n",
    "embedding_vecor_length =100\n",
    "model = Sequential()\n",
    "model.add(Embedding(70000, embedding_vecor_length, input_length=max_review_length))\n",
    "model.add(LSTM(100))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "print(model.summary())\n",
    "#Refer: https://datascience.stackexchange.com/questions/10615/number-of-parameters-in-an-lstm-model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 462
    },
    "colab_type": "code",
    "id": "LBcxIdXxp-kg",
    "outputId": "8e1e19fa-95aa-4ebc-e885-23f8cbceb5bb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Train on 70000 samples, validate on 29999 samples\n",
      "Epoch 1/10\n",
      "70000/70000 [==============================] - 914s 13ms/step - loss: 0.3412 - acc: 0.8751 - val_loss: 0.3079 - val_acc: 0.8688\n",
      "Epoch 2/10\n",
      "70000/70000 [==============================] - 915s 13ms/step - loss: 0.2236 - acc: 0.9117 - val_loss: 0.2726 - val_acc: 0.8855\n",
      "Epoch 3/10\n",
      "70000/70000 [==============================] - 912s 13ms/step - loss: 0.2002 - acc: 0.9216 - val_loss: 0.2788 - val_acc: 0.8883\n",
      "Epoch 4/10\n",
      "70000/70000 [==============================] - 918s 13ms/step - loss: 0.1850 - acc: 0.9270 - val_loss: 0.2936 - val_acc: 0.8878\n",
      "Epoch 5/10\n",
      "70000/70000 [==============================] - 913s 13ms/step - loss: 0.1726 - acc: 0.9342 - val_loss: 0.2847 - val_acc: 0.8825\n",
      "Epoch 6/10\n",
      "70000/70000 [==============================] - 921s 13ms/step - loss: 0.1989 - acc: 0.9248 - val_loss: 0.3067 - val_acc: 0.8856\n",
      "Epoch 7/10\n",
      "70000/70000 [==============================] - 886s 13ms/step - loss: 0.1607 - acc: 0.9396 - val_loss: 0.3111 - val_acc: 0.8841\n",
      "Epoch 8/10\n",
      "70000/70000 [==============================] - 875s 12ms/step - loss: 0.2065 - acc: 0.9260 - val_loss: 0.3207 - val_acc: 0.8761\n",
      "Epoch 9/10\n",
      "70000/70000 [==============================] - 861s 12ms/step - loss: 0.1623 - acc: 0.9396 - val_loss: 0.3209 - val_acc: 0.8836\n",
      "Epoch 10/10\n",
      "70000/70000 [==============================] - 871s 12ms/step - loss: 0.1434 - acc: 0.9467 - val_loss: 0.3246 - val_acc: 0.8805\n",
      "Accuracy: 88.05%\n"
     ]
    }
   ],
   "source": [
    "h=model.fit(X_train,\n",
    "          y_train,\n",
    "          batch_size=400,\n",
    "          validation_data=(X_test, y_test),\n",
    "          epochs=10)\n",
    "# Final evaluation of the model\n",
    "scores = model.evaluate(X_test, y_test, verbose=0)\n",
    "print(\"Accuracy: %.2f%%\" % (scores[1]*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> We got an accuracy of 88.05%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 289
    },
    "colab_type": "code",
    "id": "8ExLNi-6HKxR",
    "outputId": "600fb348-fac8-4fbb-82ce-fea3f4c0bfe8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_3 (Embedding)      (None, 300, 128)          8960000   \n",
      "_________________________________________________________________\n",
      "dropout_2 (Dropout)          (None, 300, 128)          0         \n",
      "_________________________________________________________________\n",
      "lstm_2 (LSTM)                (None, 192)               246528    \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 1)                 193       \n",
      "=================================================================\n",
      "Total params: 9,206,721\n",
      "Trainable params: 9,206,721\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# create the model\n",
    "embedding_vecor_length =128\n",
    "model = Sequential()\n",
    "model.add(Embedding(70000, embedding_vecor_length, input_length=max_review_length))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(LSTM(192))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "print(model.summary())\n",
    "#Refer: https://datascience.stackexchange.com/questions/10615/number-of-parameters-in-an-lstm-model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 221
    },
    "colab_type": "code",
    "id": "9HjGV4_yrLEk",
    "outputId": "1b3d13fb-6c90-4f9c-e394-59d01bed1402"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 70000 samples, validate on 29999 samples\n",
      "Epoch 1/5\n",
      "70000/70000 [==============================] - 1855s 27ms/step - loss: 0.2325 - acc: 0.9087 - val_loss: 0.2323 - val_acc: 0.9083\n",
      "Epoch 2/5\n",
      "70000/70000 [==============================] - 1849s 26ms/step - loss: 0.1659 - acc: 0.9368 - val_loss: 0.2199 - val_acc: 0.9120\n",
      "Epoch 3/5\n",
      "70000/70000 [==============================] - 1858s 27ms/step - loss: 0.1396 - acc: 0.9479 - val_loss: 0.2415 - val_acc: 0.9103\n",
      "Epoch 4/5\n",
      "70000/70000 [==============================] - 1879s 27ms/step - loss: 0.1175 - acc: 0.9563 - val_loss: 0.2607 - val_acc: 0.9070\n",
      "Epoch 5/5\n",
      "70000/70000 [==============================] - 1860s 27ms/step - loss: 0.0983 - acc: 0.9640 - val_loss: 0.2607 - val_acc: 0.9079\n",
      "Accuracy: 90.79%\n"
     ]
    }
   ],
   "source": [
    "h=model.fit(X_train,\n",
    "          y_train,\n",
    "          batch_size=50,\n",
    "          validation_data=(X_test, y_test),\n",
    "          epochs=5)\n",
    "# Final evaluation of the model\n",
    "scores = model.evaluate(X_test, y_test, verbose=0)\n",
    "print(\"Accuracy: %.2f%%\" % (scores[1]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 288
    },
    "colab_type": "code",
    "id": "y4r53FaHPxus",
    "outputId": "6921e3e9-f541-4a12-f52c-33aca07e133b"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nDj1GnTp1qFWrVqGfIf8Yzz33HKtXr6ZVq1Z07NiROXPmADBw4EC6d+/OddddR8OGDRkxYgSHDh2K\n6NjlYYUjToLS1m05YysoOePhhhtuYMqUKUydOpXu3btTr169gvf69+9Pr1692LhxI7t37+aWW24J\n6w6xBg0asHHjxoL1b775puD1wYMHufbaaxk+fDjfffcdu3bt4vLLLy/43rKm4mjYsCFff/11wbqq\nsnHjRho1ahT2z1yWhg0bsmPHDvbu3VvoZ8g/RsuWLXnppZfYunUrd9xxB71792b//v1Uq1aN0aNH\ns3LlShYvXsycOXMKNQX6zQqHMSYubrjhBt566y0mTJhQqJkKYO/evdSpU4fq1auzZMkSpk+fHtZ3\n9unThyeeeIJNmzaxc+dOxo4dW/DeTz/9xMGDBznxxBOpWrUq8+bN48033yx4v169emzfvp3du3eX\n+N1z587l7bff5tChQzz22GMce+yxnHfeeVH89K7wHDhwoNDSpEkTzjvvPEaOHMmBAwf47LPPeO65\n5wo66KdOncq2bdtISUkhPT0dcFc+CxYs4PPPPycvL4+0tDSqVatGSkr8fp1b4YiTZGrrLo3ljK2g\n5IyHjIwMzjvvPPbv30+vXr0KvffMM88watQoatWqxZgxYwo6gcvy61//mu7du9O2bVvat2/PNddc\nU/BerVq1eOKJJ+jTpw/HH38806dPL3TcVq1a0a9fP5o3b056ejpbtmwp9N2nnXYaU6dO5fe//z11\n69bltdde47XXXuOYY46J6udfvHgxNWrUKLTk5uby0ksvsWHDBho2bMjPf/5z7rvvPi699FIA5s+f\nT+vWrUlNTWXo0KG8/PLL1KhRg2+//ZbevXuTlpbG6aefzoUXXsjAgQOjyhUNGwBoTAWRrAMATWLZ\nAMAAC0pbt+WMraDkNCYSVjiMMcZExJqqjKkgrKnKFMeaqowxxiScFY44CUpbt+WMraDkNCYSVjiM\nMcZExPo4jKkgrI/DFMf6OIwxxiScFY44CUpbt+WMraDkDJK8vDxSU1MLzUtl4ssKhzHGV/kPSkpN\nTSUlJYUaNWoUrE+bNi3i76tSpQr79u3j5JNPjviza9asKXNyQ1M26+MwpoIIQh9HRkYGEydOLJiL\nqTi5ubm+PU52zZo1tGzZMunPUyxZH4cxpsK5++676du3L/369aNWrVpMnTqVDz74gM6dO5Oenk6D\nBg0YMmRIwfMmcnNzERE2bNgAwIABAxgyZAg9e/akVq1anHvuuaxfvz7iHAcOHGDIkCE0aNCARo0a\nMWzYsIKn/W3dupXLL7+c9PR06tSpwwUXXFDwuYceeoiGDRuSlpZGq1atKkXzpBWOOAnK/0yWM7aC\nkjPRXn31Vfr378/u3bvp27cvVatW5fHHH+f7779n0aJFzJ8/v+B54cWZPn06999/Pzt27ODkk0/m\nnnvuiTjDmDFjWLZsGZ999hmffPIJixYt4uGHHwbg0UcfpXnz5mzbto1vv/2WBx54AIAVK1Ywfvx4\nli9fzp49e5g3b15UTWh+69jx6KU8/LkeNMYkn1i17fvQzNO1a1euvPJKwD2jvGPIb7bmzZvzm9/8\nhoULF3LbbbcV+/nevXvToUMHAK6//nruuuuuiDNMmzaNCRMmcOKJJwIwatQohg4dyujRo6lWrRpr\n167lm2++oUWLFgVXHFWrVuXAgQOsWLGCunXr0qxZs4iPGw/PPHP0tk6dov8+u+KIk6A8l8FyxlZS\n5Uzks2PLEPr4V4Avv/ySK664gvr165OWlsaoUaNKfeRreR/hCkc/Kjb0Ea533nknTZs25ZJLLqFF\nixY8+uijgHtmx2OPPcaoUaM46aST6NevH99++23Ex/ZbrK84rHAYYxKu6J1ON998M2eeeSZr1qxh\nz549jBkzxvcO7aKPig19hGtaWhp//etf2bBhA7NmzeKRRx5h4cKFgOtjWbRoEevXrycvL4+RI0f6\nmjMZWOGIk6C0dVvO2ApKzmSzd+9eateuTc2aNVm1alWp/RvRKPoI18OHD9OvXz/GjBnD999/z7Zt\n27j//vsLHuH62muvsXbtWlSV2rVrU6VKFVJSUli1ahULFizg4MGDBU/1i+cjXBOl4v+ExpjAeeyx\nx5g8eTK1atXi5ptvpm/fvjH9/qKPcH333XcZPXo0bdu25cwzz6RNmzacc845BVcPX331FRdffDGp\nqal06dKFoUOHcv7553Pw4EFGjBhB3bp1qV+/Pjt37uTBBx+MadZk5Ps4DhHpATwOVAEmqurYIu8P\nA24CcoFtwK9U9WvvvTzgc2/Xb1S18IOKsXEcxuQLwjgOE39+jOPwtXCISBVgNdAN2AQsBfqp6sqQ\nfS4CPlLVH0Tkt0CWqvb13tunqqllHMMKhzFY4TDFC+IAwE7AGlVdp6o/AS8DV4XuoKoLVPUHb/VD\noLHPmRIiKG3dljO2gpLTmEj4XTgaARtD1jd520pyIzAvZL26iCwTkQ9F5Go/AhpjjIlM0gwAFJEB\nQAfgwpDNTVV1s4g0B94Rkc9VdW3Rzw4ePJiMjAwA0tPTyczMLLh/Pv9ffLYe3nr+tmTJE/T1/G3x\nPJ4xxcnOzmbSpEkABb8vo+V3H8e5wL2q2t1bHwmgqg8X2e9S4EngQlXdWsJ3TQLmqOrMItutj8NU\nanl5sHo1nHGG9XGYowWxj2Mp0FJEmonIMcB1wOzQHUSkHTAe6BVaNETkeBE51ntdF+gCrCSggtLW\nbTljK9Y5VWHNGnj5ZfjjH+HCC+H44+FnP4vpYYwpla9NVaqaKyK3AW/gbsd9XlVXiMgYYJmqzgYe\nBVKBf3ijR/Nvuz0dGC8ih3EFbmzo3VjGVHSq8M03sGyZW5YuhY8/hlq1oEMHt9x9N5x9NtSpAxkZ\nTe1ZE+YoodOoxIo9j8OYJLFlS+EisWwZVKni5hXKLxQdOkC9eolOaiqCuI3jEJEUIFVV90RzMD9Y\n4TBBtG3bkSKRXygOHjy6SDRqFLtJbY0J5Wsfh4hMF5E0EakJfAGsFJH/ieZglVllbZP3S5By7twJ\nb70FY8dC796QkQEtW8Kf/wz79sGAAbBoEXz/PcyfDw88AFdfDY0bx69oBOl8JrsgZCyvcPo4zlDV\nPSJyPW6MxZ3Ax7i+CWNMiLw8+PxzVwgWL4bsbNi9G9q1c1cT11wDDz0Ep5wClWAuPFNBldlUJSIr\ngExgOvCUqi4UkU9VtW08ApbFmqpMIu3bBx995ArFokXw4YdQvz506eKWzp2hVSvXV2FMMilPU1U4\nVxzjgQ3Ap8C7ItIUSJo+DmPiadOmI0Vi0SL48kvIzHRF4tZbYepU8B4gZ0yFVebFsqo+oaqNVPVy\ndb4GLopDtgolKO2elvOIvDzIyYGnn4b+/aFpU1ckpk93/Q9PPAHbt7sC8qc/wVVXHV007HzGVhBy\nBiFjeZV5xSEiQ4EXgL3ARKAdrp/jTX+jGRNfpTU7XXIJjBoFp51mdzkZE04fx6eq2lZEugM3A/cA\nL6pq+3gELIv1cZholdbs1KULnHeeNTuZisvvPo78L74cVzBWiA1PNQETerdT/rJ//5Ei8cQTbgR2\n9eqJTmpM8gvnhsCPReRNXOF4Q0RqAYf9jVXxBKXds6Lk3LcP3n4bxoyB7t3dlBx9+7opOy69FN58\n0w3C+/e/YcQIVzz8KBoV5XwmiyDkDELG8grniuNG3O2467yn9J0A/NLfWJGZ+fR3NGxXj+bN3XQM\ndj1U+djdTsbET1hTjohIL+ACb3Whqr7ma6oIiIjuqF6fB06ewIs7f8b+/dCsGTRvfuTP/KVZMzju\nuEQnNuVVVrNTly7W7GRMWXydq0pExgIdgWnepn7AUlW9K5oDxpqIqL77LgwcCFdcwd5Rj7L+u+NY\nt46jlg0b3BTUocUkdGnQwEbzJqPi7nZq0KBwoTj1VLvSNCYSfheOz4BMVT3srVcBPlHVNtEcMNYK\n7qratcu1SeTkuBvtMzOP2vfwYTcDaWgxWb/+yOtdu9w8QsUVlWbNIDU1+pyhT4FLZsmQs7hmp3bt\nCt/t9MUXic8ZjmQ4n+GwnLEThIzg/11VAOnADu917WgO5Lv0dFcwpk2Dbt3gjjtg2LBClxApKW7g\nVuPGcMEFR3/F/v3uqiS0sLzzzpECk5pa8tVKo0Y2rUQ0imt2+uEHVxzsbidjklM4Vxz9gLHAAtyt\nuRcAd6rqK/7HK1ux4zjWr3dNV9Wrw+TJ7rd6OanCt98Wf6Wybp2b2fTkk0u+WqmdnOU27qzZyZjk\n4PvzOESkAa6fA2AJkKKqW6I5YKyVOAAwNxcefhieegqeeQauvdbXHAcOHH21ErpUr350Z33+0qQJ\nVPX1WYyJU7TZ6auvjh5kV7duolMaU/nE7UFOIQf8RlVPjuaAsVbmyPGPPoLrr3cPZ3788fJ1VERJ\nFWbNyqZBg6xir1a+/dY1n5XUDHb88fHLWp722dKanbp2PXK307HHJjZnPFnO2ApCziBkhPj0cRx1\nzCg/F3/nnAOffAJDh7oe1mnToFOnuEYQcb/8O3d2S1EHD7pnS4cWkyVLjrxOSSm5Cezkk+GYY+L6\n4xQordnp0kth9GhrdjKmIqr4VxyhZs6E3/0OhgyBO+8MRG+2KuzcWXIT2ObN7pd1SVcrJ5wQu1/c\n1uxkTMXhS1OViDwJFPemAINUNS2aA8ZaxJMcbtoEN9wAhw654cRNm/oXLg4OHYKNG0suLLm5JReV\npk1LbjYqqdmp6CC7WDQ7GWPiz6/CMai0D6rq5GgOGGtRzY57+DA89hg8+iiMG+cetuCzRLV77tp1\ndJ9K/rJxo5uGI7SYrF2bzX//m3XU3U5du7rnZCdLs1NQ2pEtZ2wFIWcQMoJPfRzJUhh8kZIC//M/\nriG+f394/XX3tJ4KeM9serrr2mnX7uj38vLcBVhoMfnpJ9eaN22aNTsZY4oXVR9HMin38zh++AGG\nD4d58+DFF90/rY0xpoKL++24ySRmD3J67TX49a/dMmoUVKtW/u80xpgkVZ7CUeaUft406hXflVe6\nea6WLXNXHWvWxPTrgzJHv+WMLcsZW0HIGYSM5RXOXLAfisg/ROTyCv/kv/r1XX/HgAFw7rnwwgvu\nflhjjDEFwpmrSoBLgV/hph2ZAUxS1dX+xyubb88c/+IL13F+6qnw97+7R8gZY0wF4WtTlTr/UdV+\nwK+BQcASEVkoIudGc9BAOPNMN3z75JOhbVs3Ta4xxpjw+jhEZKiILAOGA78H6gJ/BKb7nC+xqleH\nv/wFnnvOzbY7YoSbHyQKQWn3tJyxZTljKwg5g5CxvMLp4/gASAOuVtUrVPVfqpqrqsuAZ/2NlyQu\nuww+/RRWr3Z9H6tWJTqRMcYkTFh9HKqqIpKGa7naG59o4fGtj6M4qjBhAvzv/8KYMXDLLckzlNoY\nYyLg96NjOwAvALVw81TtAn6lqh9Hc8BYi2vhyPfVV26q9gYNXDPWSSfF9/jGGFNOvnaOA88Dt6pq\nhqo2BX6HKySV12mnweLFrgM9M9ONOi9DUNo9LWdsWc7YCkLOIGQsr3AKR56qvpe/oqrvA7n+RQqI\nY45xTxicPh1uvtlN1f7jj4lOZYwxvgunqWocUAN4CTfNel/gADAVQFWXl/H5HsDjQBVgoqqOLfL+\nMOAmXDHahmsG+9p7bxBwt7frA8VNvJiQpqqidu50/R0rVrhC0qZNYvMYY0wZ/O7jWFDK26qqF5fy\n2SrAaqAbsAlYCvRT1ZUh+1wEfKSqP4jIb4EsVe0rInWAZUAHXMH6GDhbVXcWOUbiCwe4jvMXX4Q/\n/tF1ng8Z4mbhNcaYJOT3AMCLSllKLBqeTsAaVV2nqj8BLwNXFfn+Bar6g7f6IdDYe90d+I+q7vCK\nxX+AHpH8cHEl4h4Q9eGH8Mor0KMHbNlS8HZQ2j0tZ2xZztgKQs4gZCyvcAYA1haRv4jIMm95TETC\nfXBFI2BjyPomb1tJbgTye5oj/WxyaNEC3nvPPUe1fXuYNSvRiYwxJqbCaar6J/AFkN+/MBBoq6rX\nlPnlIr2BHqp6k7c+EDhHVW8rZt8BwG3Ahap6UESGA9VV9QHv/XuAH1X1z0U+lxxNVcVZvNhNmNit\nmxuBXrNmohMZYwzg0xMAQ7RQ1WtD1u8TkZwwv38z0CRkvbG3rRARuRT4X7yiEfLZrCKfzS7uIIMH\nDyYjIwOA9PR0MjMzCx7dmH/ZmJD1884j+8kn4YknyGrfHqZPJ3vv3sTlsXVbt/VKu56dnc2kSZMA\nCn5fRk1VS11wU450DVnvAnxQ1ue8fasC64BmwDHAp0DrIvu0A9YCLYtsrwOsB473lvVAnWKOoUGw\n4J57VE88UfXhh1VzcxMdp0QLFixIdISwWM7YspyxE4SMqqre784yf48Xt4Rz288twNMiskFENgBP\nATeHWZRycc1PbwCrgBmqukJExohIL2+3R4FU4B8ikiMis73P7gDux92JtRQY420Lposvdg+JmjcP\nLrkENm4s+zPGGJOESu3jEJEUoLeqzvDmqkJV98QrXDiSuo+jOHl58Oijrs/jySehb99EJzLGVEJ+\nj+NYpqodokoWB4ErHPmWLXPzXXXu7ApIWlqiExljKhG/56p6S0SGi0gTEamTv0RzsMosv5OqQIcO\nsHy5e+ZHu3bwwQcJyVXUUTmTlOWMLcsZO0HIWF7h3FWV35byu5BtCjSPfZxKpmZNGD/ejfX4+c/h\nt791o86rhvOfxRhjEiOcpqrqqnqgrG2JEtimqqK2bIHBg2HfPpg6FZpbXTbG+MfvpqrFYW4z5dGw\nIcyfD336wDnnwJQpbv4rY4xJMiUWDhGpLyJnAzVEpJ2ItPeWLOC4uCWsIMJq90xJgdtvh7ffhj/9\nCfr1czPvxlFQ2mctZ2xZztgJQsbyKu2KozvwZ9yI7b8Aj3nLMOAu/6NVYm3awNKl7smCmZmwcGGi\nExljTIFw+jiuVdV/xilPxCpMH0dJ5s2DG2+EQYPgvvvcA6SMMaac/B7HcSxwLZBByF1YqjommgPG\nWoUvHABbt7ri8d//wrRp7tG1xhhTDn53jv8b9wyNXGB/yGIiUK52z5NOgtmzXfHo2hUmTPCt4zwo\n7bOWM7YsZ+wEIWN5hTNgoLGqJu8DlCoLETfOIysL+veH1193BaRu3UQnM8ZUMuE0Vf0deFJVP49P\npMhUiqaqog4ehHvucc83f/55uOyyRCcyxgSM330cK4FTcNOaHwQENx1vm2gOGGuVsnDke/ttN2jw\nF7+Ahx5y05cYY0wY/O7j6Am0BC4DrgR+5v1pIuBLu+cll0BODnzzjRs0uGJFub8yKO2zljO2LGfs\nBCFjeZVZOFT1a9xT/C72Xv8QzudMnJxwAvzjHzB0qOv/ePJJG3FujPFVOE1Vo4EOwGmqeqqINAT+\noapd4hGwLJW6qaqoNWvcVO0nnOD6PurXT3QiY0yS8rup6udAL7xbcFV1C1ArmoMZn51yCrz/Ppx9\ntpuqfc6cRCcyxlRA4RSOn/KfTwsgIjX9jVQxxa3ds1o1uP9+13z1+9/DrbfCDz+E/fGgtM9aztiy\nnLEThIzlFU7hmCEi44F0Efk18BYwwd9Ypty6dnUd53v2uCuQTz5JdCJjTAVRZh8HgIh0w91VJcAb\nqvofv4OFy/o4wjBtGvzhDzBiBAwb5mbhNcZUan6P46gJHFDVPBE5DTgNmKeqh6I5YKxZ4QjThg0w\ncKCbJHHKFGjUKNGJjDEJ5Hfn+LvAsSLSCJgPDAQmRXOwyizh7Z4ZGZCdDRdfDO3bwz+Ln/A44TnD\nZDljy3LGThAyllc4hUNU9QfgGuBvqvoLoLW/sYwvqlRxzzR/7TW48043aeK+fYlOZYwJmHCaqj4B\nbgX+CtyoqitE5HNVPSseActiTVVR2rfPPW1w4ULXB9KpU6ITGWPiyO+mqtuBkcCrXtFoDiyI5mAm\niaSmwsSJMHYsXHklPPAA5OUlOpUxJgDCmXJkoar2UtVHRCQF+F5Vh8QhW4WStO2e114LH38MCxZA\nVhbZU6YkOlFYkvZ8FmE5YysIOYOQsbzKLBwiMl1E0ry7q74AVorI//gfzcRN48bwn//A1VfDkCFw\n+unu9t033oAff0x0OmNMkgmnjyNHVTNF5HqgPXAn8LFNq15BHT7sBg7On++WnBzo0gV69HDLqae6\nh0oZYwLN73EcK4BMYDrwlKouFJFPVbVtNAeMNSscPtu1C955xxWRefOgatUjReTii6GWTVtmTBD5\n3Tk+HtgA1ATeFZGmwJ5oDlaZBaXd86ic6elwzTXw97+7537MnQstW8LTT0PDhnDRRfDII/Dpp3Gd\nzj2w5zNJWc7YCULG8irzmeOq+gTwRMimr0XkIv8imaQlAmec4ZZhw2D/fnc77/z57imEe/ceuRq5\n9FI3vbsxpsIJp6mqNjAauMDbtBAYo6q7fc4WFmuqSiJr17oO9fnzXUE54wzo3t0Vko4d3QBEY0xS\n8LuP45+4u6kme5sGAm1V9ZpoDhhrVjiS1MGDsGjRkU72zZuhWzdXRLp3hwYNEp3QmErN7z6OFqo6\nWlXXect9QPNoDlaZBaXdM2Y5jz3WdZ7/6U/w2WduuewyeP11aN0aMjPdtCfZ2fDTT4nL6TPLGVtB\nyBmEjOUVTuH4UUS65q+ISBfAbu43kWnUCH71K5gxA7ZuhWeecTP1jhgBJ57oxpA8+6ybxdcYk9TC\naapqC0wBanubdgKDVPUzn7P8XqcfAAAUiklEQVSFxZqqKoBt29wAxPnzXR/J8ccf6WS/8EKoUSPR\nCY2pcHzr4/CmGOmtqjNEJA1AVSO6FVdEegCPA1WAiao6tsj7FwDjgDbAdao6M+S9POBzb/UbVe1V\nzPdb4ahIig5A/OSTwgMQTzvNBiAaEwO+9XGo6mFghPd6TxRFowrwNNATOAPoJyJnFNntG2AwboBh\nUT+qaqa3HFU0giQo7Z4Jz5mS4p4Xctdd8O67sGkT/OY3sHKl6yNp1gxuuYXsBx5wj8VNcgk/n2Gy\nnLEThIzlFU4fx1siMlxEmohInfwlzO/vBKzxOtV/Al4GrgrdQVU3eM1ehyOLbiqF2rWPDED8+ms3\nev200+Df/3b9JllZbobfnJy4DkA0pjILp49jfTGbVVXLvLNKRHoDPVT1Jm99IHCOqt5WzL6TgDlF\nmqpygRwgFxirqrOK+Zw1VVVWP/xwZADi/PnuCiR/3Ei3bjYA0ZhSlKepKpyR482i+eIYaaqqm71n\ngLzjPUBqbQLzmGRy3HHQs6dbANatc53rL70EN98MrVod6Rvp1MkGIBoTIyUWDhEZgLsiebHI9oFA\nnqoW1ydR1GagSch6Y29bWFR1s/fnOhHJBtoBRxWOwYMHk5GRAUB6ejqZmZlkZWUBR9obE72evy1Z\n8pS0Pm7cuKQ8f2Gdz+bNyT79dDj9dLJmzIDFi8n++99h6lSydu2CSy8lOyMDOnYkq3fvuOQN9PlM\nonxBOp85OTncfvvtSZMnfz07O5tJkyYBFPy+jJqqFrsAHwGpxWyviZtWvcTPhuxbFVgHNAOOAT4F\nWpew7yTcHVz568cDx3qv6wL/B5xRzOc0CBYsWJDoCGGpsDk3bVJ9/nnVPn1Ujz9etU0b1REjVN95\nR/XgQV8yqlbg85kgQcgZhIyqqt7vzjJ/jxe3lNjHISLLVbV9Ce99pmE+j0NELsfdblsFeF5VHxSR\nMcAyVZ0tIh2BV71CcQD4VlVbi8h5uJl5D+M68cep6nPFfL+W9DMYU6zcXFi69EjfyJdfuk72/Gat\nZolsnTUmPnwZxyEiq4AOqrq/yPZawFJVbRXNAWPNCocpt++/LzwAsXbtwgMQjzsu0QmNiTm/xnE8\nB8z0nr+Rf6AM3C21R/3L35QutC05mVXKnHXrQr9+MHkybNkCL78M9eu723zr1XN3av31r7BqVcS3\n/FbK8+mjIOQMQsbyKrFzXFX/LCL7cA9vSvU278PdFvu3uKQzJt5SUqBdO7eMHAm7dx95AuK4cW6f\n0Ccg1q5d+vcZUwGVOY4DCpqnUNW9vieKkDVVmbhRdf0h+X0jixe7Ue75haRtW1d4jAkAX5/Hkeys\ncJiECR2A+MYb7vnsl13mishll7kmMGOSlN/P4zAxEJR2T8sZgfwBiI8/7q5EPvgAzjvPTR3fogV0\n6kR2//4wZw7s3JnotKVKivMZhiDkDELG8rLCYUyseBMwMmuWmyr+T39yzxwZNw5OPhnOOgt++1uY\nNg2++SbRaY2JWjhzVX0MPA9MV9Wk+2eTNVWZQDh0CD79FN5/H957z/157LHQteuR5cwzrY/ExI3f\nzxw/Bfgl0BdYBrwAvJksv62tcJhAUoU1awoXkm3bXFNXfiHp2BGqV090UlNB+drHoaprVPV/gVNx\nz8x4HvhaRO6LYHr1Si8o7Z6WM7ZKzCkCLVvCL38Jzz8Pq1e7fpIbb3QFZNgwN7tv167u2ew+95ME\n/nwmkSBkLK8yZ8cFEJE2uKuOy4F/AtOArsA7QKZv6YypTOrVc88eueYat75vH3z0kbsaGTfODVLM\nyDhyRXL++a7vxJg4C7ePYxdutPg/VfVgyHv/UtVr/I1YOmuqMpVGWf0k558PrVtbP4kJi9/PHL9T\nVR+KNpzfrHCYSqusfpLzz4cOHayfxBTL72eOJ/SKoqIISrun5YwtX3OW1U/yhz8U7ieZO7fEfhI7\nn7EThIzlFU4fx1siMhx4BSiYKVdVd/iWyhgTnZL6Sd57z03UeN11R/pJzj/f/Wn9JCZCvj5zPB6s\nqcqYCOT3k+Q3bVk/SaVlc1UF/GcwJmHy+0lCC4n1k1QKvs9VJSJnikgfEbkhf4nmYJVZUNo9LWds\nJX1Or58ku3nzo/tJtm6NqJ8kHpL+fBKMjOVVZh+HiIwGsoAzgNeBnsD7wBRfkxljEsP6SUwZwunj\n+BxoC3yiqm1FpB4wVVW7xSNgWaypypg4s36SCsHvuaqWqGonbyDgRcBeYJU9c9wYA1g/SUD53cex\nTETSgQnAx8By4INoDlaZBaXd03LGVqXImT+e5Fe/KrufZOTIcvWTBOF8BiFjeZXZx6Gqt3ovnxWR\n+UCaqn7mbyxjTKCF20+S30di/SSBEu4zxxsBTQkpNKr6ro+5wmZNVcYEUGn9JPnFxPpJfOV3H8cj\nuGdxrATyvM2qqr2iOWCsWeEwpgIorZ8kv5BYP0lM+d3HcTVwmqperqpXektSFI0gCUq7p+WMLcsZ\nptL6Sb77rqCfJLtVK7j1VnjhBfj8c8jNTWzuYiT8XMZBOHNVrQOqAQfL2tEYY2KmaD/J/v2uqOTl\nwdtvw9ixsHkzZGa6pyV26OD+POUUa+LyWThNVf/EjeN4m5DioapD/I0WHmuqMqYS27ULli+HpUth\n2TL3565dcPbZRwpJhw7QtKm7qjEF/O7jGFTcdlWdHM0BY80KhzGmkG3bXBHJLyRLl7omrdCrkg4d\noEGDRCdNKJvkMAA/Q3Z2NllZWYmOUSbLGVuWM7aizrl585FCkv9njRqFC0mHDm68SaIyxll5CkeJ\nfRwiMkNV+3hTjhz1m1lV20RzQGOMibtGjdxy1VVuXRU2bDhyRTJ2LHz8MdStW/jKpH17SEtLaPRk\nVOIVh4g0UNX/ikjT4t5X1a99TRamoFxxGGOS3OHD7m6u0KuSTz91AxNDr0wyM+G44xKdttzi1lQl\nInWB7cn0m9oKhzHGN7m5sGJF4WaulSvdrcOhVyZnnQXHHJPotBHxZRyHiHQWkWwR+ZeItBORL4Av\ngO9EpEe0YSuroNzbbTljy3LGVtxzVq0Kbdu68STPPusKx44dMHGia8ZasgQGD4b0dOjUCW69lew7\n7kjaMSaxUto4jqeAu4DawDtAT1X9UERaAS8B8+OQzxhjkkv16u4qo2PHI9v27YOcHHdVMncuvPoq\nbNlSYceYlNbHkaOqmd7rVap6esh7n6hquzhlLJU1VRljktKuXa7DPbSZK4nGmPjSxyEiy1W1fdHX\nxa0nkhUOY0xgbN3qikloB3yCxpj4NVdVWxHZIyJ7gTbe6/z1syII10NEvhKRNSJyZzHvXyAiy0Uk\nV0R6F3lvkIj8n7cUOxAxKKwNObYsZ2xZztgpNeNJJ0HPnjBqFMye7ZqzcnLgN79xd3U99RSceSY0\nbgxXXw0PPghvvAHbt8ctfzhK7ONQ1Srl/XIRqQI8DXQDNgFLRWS2qq4M2e0bYDAwvMhn6wCjgQ64\ncSQfe5+N7gkwxhiTbESOjDG5+mq3TRXWrz9yVfLww25alSQaY+LryHERORe4V1W7e+sjAVT14WL2\nnQTMUdWZ3no/IEtVb/bWxwPZqvpSkc9ZU5UxpmI7fBi++qpwf0k5x5j4MnI8RhoBG0PWNwHnlOOz\njWKUyxhjgiMlBU4/3S0DB7pthw65MSX5hWTyZFi1Ki5jTPwuHHExePBgMjIyAEhPTyczM7Ngrpj8\n9sZEr+dvS5Y8Ja2PGzcuKc+fnU9/1/O3JUueIJ/PnJwcbr/9dv+PV60a2Tt3wimnkHXTTe79N9+E\ntWvJUoWPPiL7kUdgyxay2rYlu2FDJm3bBnXrktG2LeWiqr4twLnAGyHrI4GRJew7Cegdst4PGB+y\nPh7oV8znNAgWLFiQ6AhhsZyxZTljKwg5ky7j3r2q772n+pe/qPbrp9qypWpqqnq/O6P63e53H0dV\nYDVwCbAZWAr0V9UVxew7icJ9HHWAj4H8236XA2er6o4in1M/fwZjjKlwdu5E6tTx9dGxUVPVXOA2\n4A1gFTBDVVeIyBgR6QUgIh1FZBPwC2C8iKzwPrsDuB9XbJYCY4oWDWOMMVE4/vhyfdz3se+q+rqq\nnqqqLVT1QW/bKFWd7b1eqqqNVbWmqp6gqq1DPvu8qp7iLS/4ndVPoW3JycxyxpbljK0g5AxCxvIK\n/qQpxhhj4sqeAGiMMZWQX1OOGGOMMUexwhEnQWn3tJyxZTljKwg5g5CxvKxwGGOMiYj1cRhjTCVk\nfRzGGGPixgpHnASl3dNyxpbljK0g5AxCxvKywmGMMSYi1sdhjDGVkPVxGGOMiRsrHHESlHZPyxlb\nljO2gpAzCBnLywqHMcaYiFgfhzHGVELWx2GMMSZurHDESVDaPS1nbFnO2ApCziBkLC8rHMYYYyJi\nfRzGGFMJWR+HMcaYuLHCESdBafe0nLFlOWMrCDmDkLG8rHAYY4yJiPVxGGNMJWR9HMYYY+LGCkec\nBKXd03LGluWMrSDkDELG8rLCYYwxJiLWx2GMMZWQ9XEYY4yJGysccRKUdk/LGVuWM7aCkDMIGcvL\nCocxxpiIWB+HMcZUQtbHYYwxJm6scMRJUNo9LWdsWc7YCkLOIGQsLyscxhhjImJ9HMYYUwlZH4cx\nxpi48b1wiEgPEflKRNaIyJ3FvH+siLzivf+RiGR42zNE5EcRyfGWZ/3O6qegtHtaztiynLEVhJxB\nyFhevhYOEakCPA30BM4A+onIGUV2uxHYqaqnAH8FHgl5b62qZnrLLX5m9VtOTk6iI4TFcsaW5Yyt\nIOQMQsby8vuKoxOwRlXXqepPwMvAVUX2uQqY7L2eCVwiIlG1uyWzXbt2JTpCWCxnbFnO2ApCziBk\nLC+/C0cjYGPI+iZvW7H7qGousBs4wXuvmYh8IiILReR8n7MaY4wJQ9VEByjFf4GTVXW7iJwNzBKR\n1qq6J9HBorFhw4ZERwiL5YwtyxlbQcgZhIzl5evtuCJyLnCvqnb31kcCqOrDIfu84e3zgYhUBb4F\nTix6j62IZAPDVXVZke12L64xxkQh2ttx/b7iWAq0FJFmwGbgOqB/kX1mA4OAD4DewDuqqiJyIrBD\nVfNEpDnQElhX9ADR/uDGGGOi42vhUNVcEbkNeAOoAjyvqitEZAywTFVnA88BL4rIGmAHrrgAXACM\nEZFDwGHgFlXd4WdeY4wxZQv8yHFjjDHxFZiR4yLyvIhsFZEvSnhfROQJbyDhZyLSPgkzZonI7pBB\njaPindHL0UREFojIShFZISJDi9knGc5nODkTfk5FpLqILBGRT72c9xWzT7EDXZMs42AR2RZyLm+K\nZ8YiWap4d1TOKea9hJ7LIllKy5kU51NENojI516GZcW8H/nfdVUNxIJrumoPfFHC+5cD8wABOgMf\nJWHGLGBOEpzLBkB773UtYDVwRhKez3ByJvyceuco1XtdDfgI6Fxkn1uBZ73X1wGvJGHGwcBTiTyX\nIVmGAdOL+2+b6HMZQc6kOJ/ABqBuKe9H/Hc9MFccqvourg+kJFcBU9T5EEgXkQbxSeeEkTEpqOp/\nVXW593ovsIqjx9ckw/kMJ2fCeedon7dazVuKtgEndKBrmBmTgog0Bq4AJpawS1IMGg4jZ1BE/Hc9\nMIUjDOEMNkwG53rNBfNEpHWiw3iX+e1w/wINlVTns5SckATn1GuyyAG2Av9R1RLPpx490DVZMgJc\n6zVXzBSRJvHMF2IcMAJ3U0xxEn4uPWXlhOQ4nwq8KSIfi8hvink/4r/rFalwBMFyoKmqtgWeBGYl\nMoyIpAL/BG7XJB5YWUbOpDinqpqnqplAY6CTiJyZiBylCSPja0CGqrYB/sORf9XHjYj8DNiqqh/H\n+9iRCDNnws+np6uqtsfNGfg7EbmgvF9YkQrHZiC0ojf2tiUNVd2T31ygqq8D1USkbiKyiEg13C/j\naar6r2J2SYrzWVbOZDqnXoZdwAKgR5G3Cs6nuIGutYHt8U3nlJRRVber6kFvdSJwdryzAV2AXiKy\nATe33cUiMrXIPslwLsvMmSTnE1Xd7P25FXgVN4dgqIj/rlekwjEbuMG7Q6AzsFtV/5voUKFEpH5+\nW6yIdMKd/7j/8vAyPAesUtW/lLBbws9nODmT4ZyKyIkiku69rgF0A74sslv+QFcIGeiaTBmLtGv3\nwvUpxZWqjlTVxqqagev4fkdVBxTZLaHnEsLLmQznU0Rqikit/NfAZUDRuz4j/ruezHNVFSIiL+Hu\noKkrIpuA0bgOPlT1WeB13N0Ba4AfgF8mYcbewG9FJBf4Ebgu3v/De7oAA4HPvTZvgLuAk0OyJvx8\nhpkzGc5pA2CyuMcIpAAzVHWOhDfQNZkyDhGRXkCul3FwnDOWKMnOZYmS8HzWA171/m1VFZiuqvNF\n5BaI/u+6DQA0xhgTkYrUVGWMMSYOrHAYY4yJiBUOY4wxEbHCYYwxJiJWOIwxxkTECocxxpiIWOEw\nJoHETQt/1JTcxiQzKxzGGGMiYoXDmDCIyABxD0LKEZHx3kyz+0Tkr+IejPS2iJzo7ZspIh96s6K+\nKiLHe9tPEZG3vJl8l4tIC+/rU73ZU78UkWmJmCLcmEhY4TCmDCJyOtAX6OLNLpsHXA/UxE0v0RpY\niJtiBmAKcIc3K+rnIdunAU97M/meB+TPB9QOuB04A2iOm2rFmKQVmLmqjEmgS3Azmy71LgZq4J5p\ncRh4xdtnKvAvEakNpKvqQm/7ZOAf3kRzjVT1VQBVPQDgfd8SVd3krecAGcD7/v9YxkTHCocxZRNg\nsqqOLLRR5J4i+0U78dvBkNd52N9Lk+SsqcqYsr0N9BaRkwBEpI6INMX9/ent7dMfeF9VdwM7ReR8\nb/tAYKH36NtNInK19x3Hishxcf0pjIkR+5eNMWVQ1ZUicjfu8ZspwCHgd8B+3JP07sY1XfX1PjII\neNYrDOs4Mk31QGC8N/X2IeAXcfwxjIkZm1bdmCiJyD5VTU10DmPizZqqjDHGRMSuOIwxxkTErjiM\nMcZExAqHMcaYiFjhMMYYExErHMYYYyJihcMYY0xErHAYY4yJyP8Dh5zjSXNHFhIAAAAASUVORK5C\nYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots(1,1)\n",
    "ax.set_xlabel('epoch') ; ax.set_ylabel('Binary Crossentropy Loss')\n",
    "\n",
    "# list of epoch numbers\n",
    "x = list(range(1,5+1))\n",
    "\n",
    "vy = h.history['val_loss']\n",
    "ty = h.history['loss']\n",
    "plt_dynamic(x, vy, ty, ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> We got an accuracy of 90.79% and the difference between the train and test split is not much in difference let us change the parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 445
    },
    "colab_type": "code",
    "id": "lHmAMROqek5R",
    "outputId": "39be5336-e8be-4e49-8521-215f3b7bbb9c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_1 (Embedding)      (None, 300, 92)           6440000   \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 300, 92)           0         \n",
      "_________________________________________________________________\n",
      "lstm_1 (LSTM)                (None, 42)                22680     \n",
      "_________________________________________________________________\n",
      "dropout_2 (Dropout)          (None, 42)                0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1)                 43        \n",
      "=================================================================\n",
      "Total params: 6,462,723\n",
      "Trainable params: 6,462,723\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# create the model\n",
    "embedding_vecor_length =92\n",
    "model = Sequential()\n",
    "model.add(Embedding(70000, embedding_vecor_length, input_length=max_review_length))\n",
    "model.add(Dropout(0.8))\n",
    "model.add(LSTM(42))\n",
    "model.add(Dropout(0.8))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "print(model.summary())\n",
    "#Refer: https://datascience.stackexchange.com/questions/10615/number-of-parameters-in-an-lstm-model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 462
    },
    "colab_type": "code",
    "id": "oEWHDGGRgrys",
    "outputId": "29ff93cd-0fdf-4abe-8d87-a9fbe27025c8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Train on 70000 samples, validate on 29999 samples\n",
      "Epoch 1/10\n",
      "70000/70000 [==============================] - 604s 9ms/step - loss: 0.2821 - acc: 0.8946 - val_loss: 0.2351 - val_acc: 0.9057\n",
      "Epoch 2/10\n",
      "70000/70000 [==============================] - 593s 8ms/step - loss: 0.2077 - acc: 0.9239 - val_loss: 0.2282 - val_acc: 0.9107\n",
      "Epoch 3/10\n",
      "70000/70000 [==============================] - 549s 8ms/step - loss: 0.1866 - acc: 0.9315 - val_loss: 0.2605 - val_acc: 0.9106\n",
      "Epoch 4/10\n",
      "70000/70000 [==============================] - 472s 7ms/step - loss: 0.1759 - acc: 0.9353 - val_loss: 0.2214 - val_acc: 0.9115\n",
      "Epoch 5/10\n",
      "70000/70000 [==============================] - 474s 7ms/step - loss: 0.1666 - acc: 0.9387 - val_loss: 0.2353 - val_acc: 0.9094\n",
      "Epoch 6/10\n",
      "70000/70000 [==============================] - 466s 7ms/step - loss: 0.1595 - acc: 0.9409 - val_loss: 0.2745 - val_acc: 0.9054\n",
      "Epoch 7/10\n",
      "70000/70000 [==============================] - 463s 7ms/step - loss: 0.1544 - acc: 0.9430 - val_loss: 0.2539 - val_acc: 0.9079\n",
      "Epoch 8/10\n",
      "70000/70000 [==============================] - 457s 7ms/step - loss: 0.1470 - acc: 0.9453 - val_loss: 0.2604 - val_acc: 0.9101\n",
      "Epoch 9/10\n",
      "70000/70000 [==============================] - 456s 7ms/step - loss: 0.1432 - acc: 0.9467 - val_loss: 0.2736 - val_acc: 0.9105\n",
      "Epoch 10/10\n",
      "70000/70000 [==============================] - 457s 7ms/step - loss: 0.1380 - acc: 0.9489 - val_loss: 0.2370 - val_acc: 0.9115\n",
      "Accuracy: 91.15%\n"
     ]
    }
   ],
   "source": [
    "h=model.fit(X_train,\n",
    "          y_train,\n",
    "          batch_size=64,\n",
    "          validation_data=(X_test, y_test),\n",
    "          epochs=10)\n",
    "# Final evaluation of the model\n",
    "scores = model.evaluate(X_test, y_test, verbose=0)\n",
    "print(\"Accuracy: %.2f%%\" % (scores[1]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 288
    },
    "colab_type": "code",
    "id": "2Uj1B_U0gzq1",
    "outputId": "b99c55ff-2794-456c-b395-62d3ac9711fb"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYwAAAEPCAYAAABRHfM8AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3XmcjvX+x/HXZyxlGSYJkUxKKWWL\nSNu0HUsnqSMiW6ccrTjVr9TpUFqdlqPttEhRSFIpQiWGIsmWtWQLqZA964zP74/vPWOMGXPd477u\n65qZz/PxuB/m3q77PfeM+zvX57uJqmKMMcbkJSHoAMYYYwoGazCMMcZ4Yg2GMcYYT6zBMMYY44k1\nGMYYYzyxBsMYY4wnvjcYItJCRH4UkeUi0ieH+28VkYUiMl9EvhaRs7Lc90DkeT+KSHO/sxpjjMmd\n+DkPQ0SKAcuAK4F1wHdAB1VdkuUx5VR1e+Tr1sDtqtoi0nC8C5wHVAUmAaerarpvgY0xxuTK7zOM\n84DlqrpSVfcBI4Frsj4go7GIKANktGDXACNVda+qrgKWR45njDEmAMV9Pn41YG2W6+uAJtkfJCJ3\nAHcDJYHLsjx3ZrbnVvMnpjHGmLyEotNbVV9W1VOB+4GHgs5jjDHmcH6fYfwCVM9y/aTIbbkZCbwS\nzXNFxBbDMsaYfFBViebxfp9hfAfUEpFTRKQkcAPwSdYHiEitLFevAn6KfP0JcIOIHCMipwC1gFk5\nvYiqhu7Sr1+/wDNYJstUFHNZJm+X/PD1DENV00TkTuAzoBjwpqouFpH+wGxV/QS4U0SuAPYDW4Cu\nkecuFpFRwBIgDbhDC9AIqdWrVwcd4TCWyRvL5F0Yc1km//hdkkJVxwPjs93WN8vXvY7w3MeBx/1L\nZ4wxxqtQdHoXRt26dQs6wmEskzeWybsw5rJM/vF14l48iIgW9O/BGGPiTUTQkHV6F1mpqalBRziM\nZfKmoGZKTk5GROxil0MuycnJMfs99L0PwxgTHz///HO+R7+YwkskqpOIIx+roP+CiZWkjAEySwxB\nxzAhk9vvReR2K0kZY4yJPWswfFJQ6+DxZpm8CWMmU/RYg2GMCbXVq1cjIqSlpQHQsmVLhg4d6umx\n0XriiSe45ZZb8p21sLM+DGMKibD2YbRo0YLzzjuP/v37H3L7xx9/TI8ePVi3bh3Fi+c+/mb16tWc\ncsop7N+//4iPi/axqampdOrUiXXr1nn/ZvJpyJAhvPHGG3z99de+v1Z21odhjCkwunbtyrBhww77\n0HrnnXe48cYb8/xgN+FhDYZPwlhztkzeWKbYatOmDX/88QdfffVV5m1btmxh3LhxdOnSBYBPP/2U\nBg0aUK5cOapXr87DDz+c6/FSUlJ44403AEhPT+fee++lYsWK1KxZk08//fSQx7711luceeaZJCYm\nUrNmTV577TUA/vzzT1q2bMn69espW7YsZcuWZf369Tz88MN06tQp8/mffPIJderUISkpiZSUFJYu\nXZp5X3JyMs888wx169alfPnytG/fnj179kT9/qxfv57WrVtToUIFTjvtNAYNGpR536xZs2jUqBHl\nypWjcuXK3H333QDs2bOHTp06cfzxx5OUlETjxo35/fffo37taFmDYYzxValSpWjXrh1vv/125m2j\nRo2idu3a1KtXD4AyZcrw9ttvs3XrVj799FNeeeUVxowZk+exBw0axLhx45g3bx6zZ89m9OjRh9xf\nqVIlxo0bx/bt23nrrbf45z//ydy5cylTpgwTJkygatWq7Ny5k507d1K1atVDnrts2TI6dOjAwIED\n2bhxI61ateLqq69m3759h3wfEydOZNWqVSxYsIAhQ4ZE/f7ccMMNnHTSSaxfv57Ro0fz4IMPMnny\nZAB69epFr1692L59OytWrKBdu3YADB06lG3btrF27Vr++OMPXn31VUqVKhX1a0fLGgyfpKSkBB3h\nMJbJm8KaSSQ2l/zo2rUro0ePzvwL/O2336Zr166HfH/nnHMOCQkJ1K1blw4dOjB16tQ8jztq1Ch6\n9+5N9erVqVChAg888MAh91911VWceuqpiAiXXHIJf/nLXw450zmS9957j6uuuoorr7ySEiVKcO+9\n97J7925mzJiR+ZiePXtStWpVKlSowNVXX838+fM9HTvD2rVrmT59OgMGDODYY4+lfv363HLLLZmN\na4kSJVi+fDmbNm2ibNmyNG3aNPP2P/74g+XLl1OsWDHOPfdcypUrF9Vr54c1GMYUEaqxueTHhRde\nSMWKFRkzZgwrVqxg1qxZdOzYMfP+b7/9lksvvZQTTjiB8uXL8+qrr7Jp06Y8j7t+/XqqVz+4z1qN\nGjUOuX/ChAk0bdqUChUqkJSUxPjx4z0dN+PYWY+XkJBA9erV+eWXg/u4ValSJfPr0qVLs3PnTk/H\n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\nm6AypafDjTe6IbR//av3TCKuv6Mw2bFjB+XLl6dMmTIsXbr0iP0X+ZF9q9QDBw7QoUMH+vfvz6ZN\nm9i4cSOPPvpo5lapY8eOZcWKFagq5cuXp1ixYiQkJLB06VKmTJnC3r17M3fRi8dWqUEpvN/Z9dfD\nd99BZCSFMWH36KOwfz/07x90kuA9++yzDB06lMTERHr06EH79u1jevzsW6VOmzaNfv36Ua9ePc4+\n+2zq1q1LkyZNMs8WfvzxRy677DLKli3LBRdcQK9evbjooovYu3cv9913HxUrVqRKlSps2bKFxx9/\nPKZZw6TwzcPI6p//hNKloRD/AE3hMHGiO0uYM8eVmfKjIMzDMPFna0llccQGY+lSN+tpzRooUSK+\nwYzxaM0aN89i1CjIMrw/atZgmJzYxD2vzjwTTj8dPv447i9ttXlvinqmffvcEmj33HPkxiKM75Mp\negp3gwFw662257cJrXvvdSWoe+8NOokxeSvcJSmAvXuhenU3uP200+IXzJg8vPcePPig67dISjr6\n41lJyuTESlLROOYY6NrVbbBkTEj88IObOzF6dGwaC2PiofA3GAD/+AcMGeLONuIkjDVny+SN35n+\n/NMtKvjkk249qDBkMsYLf9YQDptataBuXfjoIzeN1piAqLo5pY0axX6yXY0aNWyvB3OYrMudHK3C\n34eR4f333frQRfAvtX373OY7zZu7pbFNcF57zf0azpzppgiFgapbzPDuu6F3b7j/fvBpOwpfbNrk\nVu2dOdN1VS5YALfcAnfcASedFHS6/HnvPfdzmDULKlXy5zV8n4chIglAWVXdHm04v3huMPbtg5NP\ndg1G7dq+5wqL9HTo2BE2b3aL1E2YAOeeG3Sqomn2bGjZEqZPd6O9w2btWvcHxc6d8Pbb4cy4bx/M\nn3+wgfj2W7f+1nnnuQUYmzRxU6/KlAk66dH717/gq69g0iQoWTL2x/el01tERohIOREpAywClojI\n/+U3ZGBKloS//z1und9hqDmrwu23u7/Axo6F229P5frr3V4KYRGG9yk7PzJt3uxWq3nllfx9EMfj\nfapeHT7/3K1l1awZvPQSHDgQXC5Vt7LPyJFu0Ybzz3dLu3fvDosWweWXu4UXt2yBL75wy71ffTV8\n951/mfIrP+/To4+6ARF33unbIsFR89LpfVbkjKINMAE4Bejsayq/dO8O77wDu3cHnSQuHnwQ5s2D\n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\nGvv0ZwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots(1,1)\n",
    "ax.set_xlabel('epoch') ; ax.set_ylabel('Binary Crossentropy Loss')\n",
    "\n",
    "# list of epoch numbers\n",
    "x = list(range(1,10+1))\n",
    "\n",
    "vy = h.history['val_loss']\n",
    "ty = h.history['loss']\n",
    "plt_dynamic(x, vy, ty, ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> We got an accuracy of 91.15% that to we ran 10 epochs and we can observe that the difference between train and test loss is low"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 323
    },
    "colab_type": "code",
    "id": "Ox0-3xSTg1Tt",
    "outputId": "28655e59-8eba-4fff-93e9-34563ec6b554"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_2 (Embedding)      (None, 300, 128)          8960000   \n",
      "_________________________________________________________________\n",
      "dropout_3 (Dropout)          (None, 300, 128)          0         \n",
      "_________________________________________________________________\n",
      "lstm_2 (LSTM)                (None, 64)                49408     \n",
      "_________________________________________________________________\n",
      "dropout_4 (Dropout)          (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 1)                 65        \n",
      "=================================================================\n",
      "Total params: 9,009,473\n",
      "Trainable params: 9,009,473\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# create the model\n",
    "embedding_vecor_length =128\n",
    "model = Sequential()\n",
    "model.add(Embedding(70000, embedding_vecor_length, input_length=max_review_length))\n",
    "model.add(Dropout(0.8))\n",
    "model.add(LSTM(64))\n",
    "model.add(Dropout(0.8))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "print(model.summary())\n",
    "#Refer: https://datascience.stackexchange.com/questions/10615/number-of-parameters-in-an-lstm-model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 391
    },
    "colab_type": "code",
    "id": "O1Lnv-say_Il",
    "outputId": "efb0846d-e544-45bf-e90b-fbfbc5ec6b9b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 70000 samples, validate on 29999 samples\n",
      "Epoch 1/10\n",
      "70000/70000 [==============================] - 670s 10ms/step - loss: 0.2755 - acc: 0.8955 - val_loss: 0.2372 - val_acc: 0.9049\n",
      "Epoch 2/10\n",
      "70000/70000 [==============================] - 673s 10ms/step - loss: 0.2007 - acc: 0.9253 - val_loss: 0.2304 - val_acc: 0.9101\n",
      "Epoch 3/10\n",
      "70000/70000 [==============================] - 671s 10ms/step - loss: 0.1800 - acc: 0.9332 - val_loss: 0.2224 - val_acc: 0.9120\n",
      "Epoch 4/10\n",
      "70000/70000 [==============================] - 664s 9ms/step - loss: 0.1682 - acc: 0.9379 - val_loss: 0.2262 - val_acc: 0.9094\n",
      "Epoch 5/10\n",
      "70000/70000 [==============================] - 664s 9ms/step - loss: 0.1565 - acc: 0.9430 - val_loss: 0.2305 - val_acc: 0.9108\n",
      "Epoch 6/10\n",
      "70000/70000 [==============================] - 664s 9ms/step - loss: 0.1490 - acc: 0.9451 - val_loss: 0.2595 - val_acc: 0.9115\n",
      "Epoch 7/10\n",
      "70000/70000 [==============================] - 666s 10ms/step - loss: 0.1435 - acc: 0.9475 - val_loss: 0.2776 - val_acc: 0.9070\n",
      "Epoch 8/10\n",
      "70000/70000 [==============================] - 665s 9ms/step - loss: 0.1363 - acc: 0.9499 - val_loss: 0.2403 - val_acc: 0.9052\n",
      "Epoch 9/10\n",
      "70000/70000 [==============================] - 664s 9ms/step - loss: 0.1307 - acc: 0.9521 - val_loss: 0.2637 - val_acc: 0.9082\n",
      "Epoch 10/10\n",
      "70000/70000 [==============================] - 666s 10ms/step - loss: 0.1282 - acc: 0.9524 - val_loss: 0.2806 - val_acc: 0.9098\n",
      "Accuracy: 90.98%\n"
     ]
    }
   ],
   "source": [
    "h=model.fit(X_train,\n",
    "          y_train,\n",
    "          batch_size=64,\n",
    "          validation_data=(X_test, y_test),\n",
    "          epochs=10)\n",
    "# Final evaluation of the model\n",
    "scores = model.evaluate(X_test, y_test, verbose=0)\n",
    "print(\"Accuracy: %.2f%%\" % (scores[1]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 288
    },
    "colab_type": "code",
    "id": "eibemUlhzCtk",
    "outputId": "d91302d7-0e7f-45e2-9e0a-c44a64fd6dc6"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYwAAAEPCAYAAABRHfM8AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3Xd4VGXax/HvTROkBaRIpIS2YANE\nQUSEKLgiLugqgiAIVtx3Fex9xcWydrHtyooKiKAsllUUVkACgu4qJRQBBQSlS29KCdzvH89MEkJC\nTsKcOWeS+3Nd52L6/DLA3DlPFVXFGGOMyU+JoAMYY4xJDFYwjDHGeGIFwxhjjCdWMIwxxnhiBcMY\nY4wnVjCMMcZ44nvBEJHOIvK9iCwXkftyuf9mEVkoIukiMlNETsl23/2R530vIhf5ndUYY0zexM95\nGCJSEvgBuBBYA3wL9FLVxdkeU0lVd0YudwP+T1U7RwrHWKA1kAxMAX6nqgd9C2yMMSZPfp9htAaW\nq+qPqrofeBe4NPsDosUiojwQrWCXAu+q6j5VXQksj7yeMcaYAJTy+fVPAlZnu74GODvng0Tkz8Ad\nQBnggmzP/W+O557kT0xjjDH5CUWnt6q+qqoNgXuBh4LOY4wx5kh+n2GsBepku147clte3gX+UZDn\niogthmWMMYWgqlKQx/t9hvEt0FhE6otIGeAq4OPsDxCRxtmuXgIsi1z+GLhKRI4TkfpAY+Cb3N5E\nVUN3DB48OPAMlskyFcdclsnbURi+nmGoaoaI3AL8BygJvKmq34nIEGC2qn4M3CIinYADwDagX+S5\n34nIOGAxkAH8WRNohNSqVauCjnAEy+SNZfIujLksk3/8bpJCVT8DPstx28PZLg86ynMfBx73L50x\nxhivQtHpXRT1798/6AhHsEzeWCbvwpjLMvnH14l78SAimug/gzHGxJuIoCHr9C620tLSgo5wBMvk\nTaJmSklJQUTssOOwIyUlJWb/Dn3vwzDGxMdPP/1U6NEvpugSKdBJxNFfK9H/gYk1SRkDZDYxBB3D\nhExe/y4it1uTlDHGmNizguGTRG0HjzfL5E0YM5nixwqGMSbUVq1ahYiQkZEBwMUXX8zIkSM9Pbag\nnnjiCW644YZCZy3qrA/DmCIirH0YnTt3pnXr1gwZMuSw2//9738zYMAA1qxZQ6lSeY+/WbVqFfXr\n1+fAgQNHfVxBH5uWlkafPn1Ys2aN9x+mkEaMGMHw4cOZOXOm7++Vk/VhGGMSRr9+/Rg9evQRX1pv\nv/02V199db5f7CY8rGD4JIxtzpbJG8sUW5dddhlbtmzhyy+/zLxt27ZtTJgwgWuuuQaATz/9lDPO\nOINKlSpRp04dHnnkkTxfLzU1leHDhwNw8OBB7rrrLqpVq0aDBg349NNPD3vsW2+9xcknn0zFihVp\n0KABw4YNA2DPnj1cfPHFrFu3jgoVKlChQgXWrVvHI488Qp8+fTKf//HHH3PqqaeSlJREamoqS5Ys\nybwvJSWFZ599lmbNmlG5cmV69uzJ3r17C/z5rFu3jm7dulG1alUaNWrE66+/nnnfN998w1lnnUWl\nSpWoWbMmd9xxBwB79+6lT58+nHDCCSQlJdGqVSs2btxY4PcuKCsYxhhflStXjh49ejBq1KjM28aN\nG0fTpk1p3rw5AOXLl2fUqFFs376dTz/9lH/84x989NFH+b7266+/zoQJE5g3bx6zZ89m/Pjxh91f\no0YNJkyYwM6dO3nrrbe4/fbbmTt3LuXLl2fixIkkJyeze/dudu/eTXJy8mHP/eGHH+jVqxdDhw5l\n06ZNdOnSha5du7J///7Dfo5JkyaxcuVKFixYwIgRIwr8+Vx11VXUrl2bdevWMX78eB544AG++OIL\nAAYNGsSgQYPYuXMnK1asoEePHgCMHDmSHTt2sHr1arZs2cJrr71GuXLlCvzeBWUFwyepqalBRziC\nZfKmqGYSic1RGP369WP8+PGZv4GPGjWKfv36HfbznX766ZQoUYJmzZrRq1cvpk+fnu/rjhs3jttu\nu406depQtWpV7r///sPuv+SSS2jYsCEiQocOHfj9739/2JnO0bz33ntccsklXHjhhZQuXZq77rqL\n3377ja+++irzMQMHDiQ5OZmqVavStWtX0tPTPb121OrVq5k1axZPPfUUZcuWpUWLFtxwww2ZxbV0\n6dIsX76czZs3U6FCBdq0aZN5+5YtW1i+fDklS5bkzDPPpFKlSgV678KwgmFMMaEam6Mw2rVrR7Vq\n1fjoo49YsWIF33zzDb179868/3//+x/nn38+1atXp3Llyrz22mts3rw539ddt24ddepk7bNWr169\nw+6fOHEibdq0oWrVqiQlJfHZZ595et3oa2d/vRIlSlCnTh3Wrs3ax+3EE0/MvHz88ceze/duT6+d\n/T2qVq1KxYoVD/sZou/xxhtv8MMPP9C0aVNatWrFhAkTAOjbty8XXXQRV111FcnJydxzzz0cOHCg\nQO9dGFYwfBLGNmfL5I1l8sc111zDqFGjGD16NBdddBE1a9bMvK93795069aN1atXs2PHDm6++WZP\nI75q1arF6tWrM6///PPPmZf37dvHFVdcwV133cXGjRvZvn07Xbp0yXzd/JbMSE5O5qeffsq8rqqs\nXr2ak046yfPPnJ/k5GS2bt3Krl27DvsZou/RuHFjxo4dyy+//MK9995L9+7d2bNnD6VLl2bw4MEs\nXryYr776igkTJhzW5OcXKxjGmLi45pprmDJlCq+//vphzVEAu3btomrVqpQtW5ZvvvmGMWPGeHrN\nHj168NJLL7FmzRq2bdvGk08+mXnf/v372bdvH9WrV6dUqVJMnDiRzz//PPP+mjVrsmXLFnbs2JHn\na3/66adMnTqVAwcO8Nxzz3HcccfRtm3bQvz0ruDs3bv3sKNOnTq0bduW+++/n71797JgwQLeeOON\nzI730aNHs2nTJkqUKEFSUhLgznSmTZvGwoULOXjwIJUqVaJ06dKUKOH/17kVDJ8U1XbwWLNM3oQx\nU0GlpKTQtm1b9uzZQ7du3Q677+9//zsPP/wwFStWZMiQIZmdu/m58cYbueiii2jevDktW7bk8ssv\nz7yvYsWKvPTSS/To0YMqVaowZsyYw963adOm9OrViwYNGpCUlMS6desOe+0mTZowevRobr31VqpV\nq8Ynn3zCJ598QpkyZQr183/11VeUK1fusCMjI4OxY8eyatUqkpOT+eMf/8hf//pXOnXqBMCkSZM4\n9dRTqVChAoMGDeLdd9+lXLlybNiwge7du1OpUiVOPvlkOnToQN++fQuVqyBs4p4xRURYJ+6ZYNnE\nvQQQxjZny+SNZTImdzbF0hhjipHdu+Hppwv3XGuSMqaIsCYpk5vov4uDB2HkSPjLX+D88+Gddwre\nJGUFw5giwgqGyY2IMHWqcscdUKECPP88tG5tfRihEsY2Z8vkjWUyRc0NN8CDD8KXX7piUVjWh2GM\nMUXc4sVQtuyxv441SRlTRFiTlMmNDas1xhgTd0WjYMybF3SCI4SxzdkyeWOZwu3gwYNUqFDhsHWj\nTHwUjYLxz38GncAYk4foBkUVKlSgRIkSlCtXLvP6O++8U+DXK1myJLt376Zu3boFfu7y5cvzXXTQ\n5K1o9GFUqQI//+zGjBlTTCVCH0ZKSgrDhw/PXCspNxkZGb5t27p8+XIaN24c+s8plqwPI6f27WHs\n2KBTGGMK4aGHHqJnz5706tWLihUrMnr0aL7++mvatGlDUlIStWrVYuDAgZn7PWRkZCAirFq1CoA+\nffowcOBALr74YipWrMg555zDypUrC5xj7969DBw4kFq1anHSSSdxxx13ZO6u98svv9ClSxeSkpKo\nWrUq7du3z3zeE088QXJyMpUqVaJp06ZFuvmwaBSMAQNC1ywVxn80lskbyxR/H374Ib1792bHjh30\n7NmTUqVK8eKLL7J582ZmzZrFpEmTMvfjzs2YMWN49NFH2bp1K3Xr1uUvf/lLgTMMGTKE2bNns2DB\nAubNm8esWbP429/+BsAzzzxDgwYN2LRpExs2bOCxxx4D4LvvvmPYsGHMnTuXnTt3MnHixEI1lSWK\nolEwfv972LQJ5s4NOokx4RXkHq35aNeuHV27ds3s42jVqhVnn302pUqVokGDBtx0001H3bK1e/fu\nnHXWWZQuXZqrr766wFulArzzzjs88sgjVK9enRo1avDwww/z9ttvA25L1HXr1vHzzz9TpkyZzDOM\nUqVKsXfvXr777jsyMjKoX78+DRo0KNyHkACKRsEoWdJNZQzRWUYY9y+wTN4U2UxB7tGaj+zbrAIs\nXbqUSy65hBNPPJFKlSrx8MMPH3Vr1WPdKhWO3JI1+1ap9913H/Xq1aNjx440bNiQZ555BnB7Zjz3\n3HM8/PDD1KhRg169erFhw4YCv3eiKBoFA+C662DcOMi21aExJjHkHLk0YMAATjvtNJYvX87OnTsZ\nMmSI7x3VObdkzb5VaqVKlXjhhRdYtWoVH330EU899VTmGU+fPn2YNWsWK1eu5ODBg9x///2+5gxS\n0SkYycmQmhqazu8wtjlbJm8sU/B27dpF5cqVKV++PEuWLDlq/0Vh5Nwq9dChQ/Tq1YshQ4awefNm\nNm3axKOPPpq5Veonn3zCihUrUFUqV65MyZIlKVGiBEuWLGHatGns27cvcxe9eGyVGpSi9ZPddFOo\nmqWMMYXz3HPPMXLkSCpWrMiAAQPo2bNnTF8/51apM2bMYPDgwTRv3pzTTjuNZs2acfbZZ2eeLXz/\n/fdccMEFVKhQgXPPPZdBgwZx3nnnsW/fPu655x6qVavGiSeeyLZt23j88cdjmjVMisY8jOjPcOgQ\nNGwI48fDmWcGG8yYOEuEeRgm/mweRl5KlIAbb4QYn74aY4wpagUD4Npr4V//CrzzO4xtzpbJG8tk\nTO6KXsGoVQsuuADGjAk6iTHGFClFqw8j6vPP4b77YM4c3yYaGRMWa9bAnXfCuHHWh2GOZH0Y+enU\nCbZvdwXDmCJq/3545hlo0QKaNAk6jSkOimbBCEHndxjbnC2TN4mQado0VyimToWvv4YhQ4LJZYqX\norun97XXwsknw3PPQaVKQacxJibWrYO77oJZs2DoULjssqxW13r16tleD+YI2Zc7OVZFsw8jqnt3\n1zx1883xDWVMjB04AC+/DE884RZnfuABKF8+6FTHZv16aN0aXn0VunULOs2x27ED+vWDjRvdQM3a\ntYNOdHS+92GISAkRSZxf1wcMcM1SCV4UTfG2apWbhzppkjuzePzxxC8W4AY0jh/v1g1dujToNMdm\n4UI46yxXJKZPD3+xKKx8C4aIjBGRSiJSHlgELBaRu/2PFgMdO8LOnfDtt3F/60RoBw8Dy3R0y5ZB\nhw7Qvn0a//lP+Dq3j/WzOvtseOopuPRS9xt6GDIV1DvvuJH8gwfDK69AmTLBZ/KLlzOMU1R1J3AZ\nMBGoD/T1NVWsRDu/bX0pk4CWLIHzz4cHH3Stq0W1e+Laa92WNldf7Vb3SRT798Ott8Ijj7jBB5F1\nCou0fPswROQ7oAUwBnhFVaeLyHxVbR6PgPk5ah8GuAbFpk3deX3lynHLZcyxWLAAOneGJ5+Ea64J\nOo3/Dhxw3Y3t28OjjwadJn9r1kCPHlCjBowYAUlJQScqOL/6MIYBq4DywAwRqQfsLHi8gNSsCRde\n6M4bjUkAc+a4f7IvvFA8igVA6dKuo3jUKHj//aDTHN20aa6zvmtX+OCDxCwWhaaqBT6AUoV5nh+H\n+xHyMXmyarNmqocO5f/YGJk2bVrc3ssry+RNkJm++kq1enXVDz44/PYwfk6qsc81e7ZqtWqqCxcW\n/jX8+qwOHVJ96inVE090XylhyHQsIt+dBfq+9dLpPSjS6S0i8oaIzAUu8LeMxdgFF8CePfDNN0En\nMSZPM2a44aUjRsAf/xh0mmCceaY7s7rsMti6Neg0WXbudP1I77/vvkY6dQo6UTC89GHMV9XmInIR\nMAD4C/C2qraMR8D85NuHEfX0027s3ptv+h/KmAKaMgV69XIbRhbXL6Ps7rwTFi2Czz6DkiWDzfLd\nd3D55W7Q5QsvwHHHBZsnVvzqw4i+YBdcofgu221eQnUWke9FZLmI3JfL/XeIyGIRWSAiUyN9JNH7\nDopIeuT42Ot75qp/f/jww9iN3TMmRj77zBWL99+3YhH11FNw8KCboBikd991Oz8/+CD8/e9Fp1gU\nlpeCMUdEPscVjP+ISEXA0+A3ESkJvApcDJwC9BKRU3I8bB5wlqo2A8YDT2e77zdVbRE5jm0uaI0a\nbuze6NHH9DJehXHctWXyJp6ZPvzQ/S7zySduhFBewvg5gX+5SpWC995zHeHvvhv/TAcOwG23uUIx\nefKxDz4I699fQXkpGNcD9wGtVPVXoAxwrcfXbw0sV9UfVXU/8C5wafYHqOq0yOsC/Bfwb46kzfw2\nIfLee/CnP8HEidCmTdBpwueEE1xBHTgQ5s+P3/uuW+fmv6xYAbNnu0UejeNpLSkR6QZEf/+Zrqqf\neHpxke5AZ1W9IXK9L3C2qt6Sx+NfATao6mOR6xlAOpABPKmqH+XyHG99GOBmBTVpAm+/bf9DTaBG\njoT773fLfTRrFnSacBs3Du691y3YUK2av+81fTr07u0K+QMPuLm/RVVh+jDyXa1WRJ4EWgHRiQwD\nReQcVY1p66KI9AHOAjpku7meqq4VkQbAFyKyUFVXFPpNSpSAm25yZxlWMExA/vlPtxz51KluQWVz\ndD16wLx50LMn/Oc/rrkq1lTh+efd/iKjRrnWa3MkLx99F6CFqh4CEJGRuH4HLwVjLVAn2/XakdsO\nIyKdgAeBDqq6L3q7qq6N/PmjiKQBZwBHFIz+/fuTkpICQFJSEi1atCA1NRXIajvMvN64Mfz1r6S+\n8AIkJR15f4yuR2/z6/ULcz1ntqDzAAwdOvTof18BXE9PT+e2227z5fUHDkzjvfdg1qxUGjVK7H9P\nEL+/v8ceS+UPf4BevdL4859j+/f366/w1luprFoFQ4emRdaCim3+6G1B//8fMWIEQOb3ZYHlN1ED\nWABUzXa9KrDAyyQPXEH6Ebf+VBlgPnBqjsdEi0DjHLdXAY6LXK4GLMOta1XwiXs59eyp+vLLBX9e\nAYRxoo5l8savTE8/rdqggerKlQV/bhg/J9X45tq6VbVRI9VRo47+uIJkWrxYtWlT1ZtuUv3tt2PL\nF6tM8UIhJu55+dLvBfwEjABGAiuBnp7fwJ2h/BApCg9GbhsCdItcngJsxPVVpAMfR25vCyyMFJmF\nwPV5vH7BP6kvvlA97bS4zvw2xdehQ6pDhqj+7neqq1cHnSaxLVrkZoJ/++2xv9Z777nXevPNY3+t\nRFSYguG107sWrh8D4BughKquy//8xX8F6vSOUnWd3yNGQNu2vuQyBtw/tYcegn//203OO/HEoBMl\nvg8+gNtvdzOua9Ys+PMPHHCd6B995PbjaBmKKcjx59sGSqq6XlU/jhwbcMNfE5eI6/z2cdnz7G2X\nYWGZvIlVJlW3nepnn0Fa2rEVizB+ThBMrssvdzvbXXml+/IvSKYNG9yM7aVL3ZDZeBWLsP79FVRh\nB40l/sr8/fu7XzG2bQs6iSmCDh2CW26BL7+EL77wfzhocfPII263gttv9/6cmTPdrngdO8KECVC1\nqm/xiqxC7ektIj+ral0f8hRYoZqkonr1gnPOcTODjImRgwfdHNGlS93ZRaXE2dQ4oezY4Xbsu/tu\nuP76vB+nCi++CH/7m5v/0rlz/DKGWWGapPIsGCLyMpDbnQL0U9VQ/Dc4poKRluZ+DVy4sOhuZ2bi\nKiPDnbyuWwcffwwVKgSdqGj7/ns47zz3Wec2tWr3brdn+LJlrr+ifv34ZwyrWPdhzAbm5HLMBm4t\nbMhQ6dDBNYJ+9VXMXzqMbZaWyZvCZjpwwJ20bt4Mn34a22IRxs8Jgs/VpIlbgLp7d1i//vBMS5e6\nM5AKFWDWrGCLRdCfU6zkOXFPVUfGM0ggop3fw4bBuecGncYksH373IxkVTciqrivahpPf/gD3Hwz\nXHGF2w0P3Mq/f/oTPPGEO8MwsVGoPowwOaYmKXC/DjZqBD/+aL1gplB++81teFSxotsJ2M0UNvF0\n6JAbNVWlijvGj3fHmWcGnSy8YtqHkSiOuWAAXH2126R30KDYhDLFxu7dbpe85GQ3rcePdY6MN7t2\nuWlVJ53kCvcJJwSdKNx8mYchIkX/Y482S8WweIaxzdIyeeM1086dbsRN/fpu9I2fxSKMnxOEK1fF\nijBnDtx7b1roikWYPqdj4WUexn9F5F8i0kWkiA4lat/eFYtZs4JOYhLEtm1w4YVuafLXXw9+G1Hj\nlCljAx795GVPbwE6AdfhlgcZB4xQ1R/8j5e/mDRJgdusd+5ct1eGMUexebMrFuefD889Z19QJjH5\n3ochIucDo4HyuEUB71PVrwuUMsZERE85RTn3XNd+2bYtNG5ciP/EW7ZAw4Zum62wnc+a0Niwwe27\nfeml8NhjVixM4vKtD0NEBonIbOAu3ByMasCdwJhCJY2xt992TQOff+42Pqle3XVEPvkkzJgBv/6a\n/2twwglufF6MzjDC2GZpmbzJK9PatW7qzlVXweOPx7dYhPFzgnDmskz+8dJN9zXwNnCZqq7Jdvts\nEXnNn1gF07KlO26JbPy6di18/bXrkrj7bli0CE47LesMJDqS4ggDBrgO8EGD7FdHc5iffoILLnDj\n/e++O+g0xgTDUx+GqqqIVMKtn74rPtG88dKH8dtvbmXKr77KOo4//vAC0rw5lCqpcOqp8NprriPc\nGGD5ctcMdeedcGvRWOPAGH/6METkLOAtoCJuHantwHWqOqewQWOpMJ3equ5LIFo8Zs1yv0G2agV3\nlhpKiwOzKff+aJvHZ1i61HVw/+Uv7uTTmKLCr/0w3gT+T1VTVLUe8GdcAUlYIq5jvF8/N/1i0SJY\nvRruuQcWNL+GyjMn0LLeFk45xS0r8OabbpGzgtSlMLZZWiZvopkWLnTNUI8/HnyxCOPnBOHMZZn8\n46UP46Cqfhm9oqozRSTDx0yBSEpyk7A6d64KG7qyotlIFl54B199BVOnwqOPupmk55yT1YzVqpVr\n2jJFz9y50KWLWxa7Z8+g0xgTDl6apIYC5YCxuOXOewJ7ccNrUdW5Pmc8qpjNw8hu5kx3arFkyWGd\n3+vWuc70aFPWggVwyimueESH9dauHdsoJv7+9z83yu6119waUcYURX71YUw7yt2qqhcU5A1jzZeC\noeqGVf39724cZR727nVLEWTvCylb1hWO8893bd8NGsQ2momt3btdf9ayZVnHp5+6daG6dAk6nTH+\nscUHY+nFF90u8++84/kpqm7e38yZMGZMGosWpVK2rBth06mTaw8PcqvOtLQ0UlNTgwuQi3hk+vXX\nI4vCsmXutu3b3XzNxo2zjlKl0ujf399MBRXGvzsIZy7L5E1hCka+fRgiUhkYDETHmU4HhqjqjoJH\nTCDXXOM2Dt682fO3vIhbKb1RI0hJcScnS5bAlCluPuCNN7r7ogWkXTsoV87Xn6LY+O03V6xzFoRl\ny9wk/gYNsgpC69ZugeLGjd18nBI5hn4Ukf5JY2LOS5PU+8AiILqhUl+guape7nM2T3w7wwA3jKpZ\nMzcAPwYOHHAnLVOmwOTJMH+++/K68EJXQM44wxaxO5p9+1xRyO1s4ZdfXJHOfqYQPWrXts/VmJz8\n6sNIV9UW+d0WFF8LxqxZcN11bjC+DzO/d+50S5dMmeKO9etd30enTln9H8Vtwvn+/bBy5ZEFYdky\nt45T3bq5F4W6da0oGFMQfhWMr4G7VXVm5Pq5wLOqek6hk8aQrwVDFU4/HV55BQrY/liYNst169wQ\n3mgBKVPm8P6P6tUL9HIxyeSH3bth1Sp3TJqUBqRmFoW1a6FOnaxC0KhR1uWUlPhsUBSWzym7MGaC\ncOayTN740ocB3AyMivRlAGwD+hU0XEIScetLDRtW4IJRGMnJ0LevO1Tdic3kya7f/aab3BlHtPmq\nXbvwzgHZvdvNnF+1yp0tRItD9Pj1V/fln5LiimJqKlx8cVZRsC1OjQmno55hiEgJoLuqjousJYWq\n7oxXOC98PcMAt1NO/fru199j/RX/GBw4AN9+6wrIlCkwb57r/4g2X7VsGb8mmewFIbdjzx6oVy+r\nKGQ/6td3H2Nxa2ozJmz8apKarapnHVMyH/leMAD693fzMu66y9/3KYBdu7L6PyZPds1Z0f6PTp1c\nU05hv5T37Mm9IETPFnbvzr0YRI8aNawgGBN2fhWMJ4HNwHvAnujtqrq1MCFjLS4F4+uv3Yip77/3\n/E0Y7zbL9euz+j8mT4bSpQ/v/6hRIytTXgUheuzalfcZQkoK1KwZu4IQxrZdy+RdGHNZJm/86sOI\nrqTz52y3KVB85jC3aQPHHecG6J9/ftBpclWrFvTp445o/8eUKTB2rNvDoV49NwJp61Y3OitnQWjZ\n8vAzhJxzE4wxxssZRllV3ZvfbUGJyxkGuJFSM2fCu+/6/14xlpHh9gNRzTpDsIJgTPHmV5PUXFVt\nmd9tQYlbwdi+3X3b/vCD+xXcGGMSWEz3wxCRE0XkTKCciJwhIi0jRyoQ0gGdPkpKckuXjhyZ/2MJ\n5/r3lskby+RdGHNZJv8crQ/jIqA/UBt4Ptvtu4AHfMwUXgMGuEkSd95pbTrGmGLHS5PUFar6fpzy\nFFjcmqTAdQK0aAHPPw8dO8bnPY0xxgd+9WEcB1wBpJDtjERVhxQiY8zFtWAAvPqqmwDx3nvxe09j\njIkxv/b0/jdwKZCBm4cRPYqnPn3g88/d8qhHEcY2S8vkjWXyLoy5LJN/vMzDqK2qnX1PkigqV4bL\nL4e33oJ77w06jTHGxI2XJql/Ai+r6sL4RCqYuDdJgdv0+eqr3RBb6/w2xiQgv5qk2gFzROR7EVkg\nIgtFZEHhIhYRrVtDhQrwxRdBJzHGmLjxUjAuBhoDvwe6An+I/Fl8ZV/2PA9hbLO0TN5YJu/CmMsy\n+SffgqGqPwF1gAsil3/18rwir3dvt1jTxo1BJzHGmLjw0ocxGDgLaKKqvxORZOBfqnpuPALmJ5A+\njKgbbnDriN93XzDvb4wxheQwJm7NAAAZ4ElEQVRXH8YfgW5EhtKq6jqgYsHjFUE33QSvvw6HDgWd\nxBhjfOelYOyP/AqvACJS3t9ICaRVK6hUyW1EkUMY2ywtkzeWybsw5rJM/vFSMMaJyDAgSURuBKYA\nr/sbK0F46Pw2xpiiIt8+DAARuRA3SkqA/6jqZL+DeRVoHwZk7Ua0ZAmceGJwOYwxpgB86cOINEF9\noap3484syolI6UJmLHoqVYLu3d3Mb2OMKcK8NEnNAI4TkZOASUBfYISfoRLOgAFHdH6Hsc3SMnlj\nmbwLYy7L5B8vBUNU9VfgcuAfqnolcKq/sRLMmWe6DZYmh6alzhhjYs7LPIx5wP8BLwDXq+p3IrJQ\nVU+PR8D8BN6HETVsmFvF9v3Qbh1ijDGZ/JqHcRtwP/BhpFg0AKYVJmCR1ru3W1tq/fqgkxhjjC+8\nLA0yXVW7qepTIlIC2KyqA+OQLbFUrAhXXglvvgmEs83SMnljmbwLYy7L5B8vo6TGiEilyGipRcBi\nEbnb6xuISOfISrfLReSINTRE5A4RWRxZCXeqiNTLdl8/EVkWOfp5fc/A5NL5bYwxRYWXPox0VW0h\nIlcDLYH7gDmq2izfFxcpCfwAXAisAb4Feqnq4myPOR/4n6r+KiJ/AlJVtaeIVAVm49axUmAOcKaq\nbsvxHuHow4g66yx47DHobHtOGWPCy68+jNKReReXAR+r6gEiy4R40BpYrqo/qup+4F3cdq+ZVHVa\nZBQWwH+B2pHLFwGTVXVrpEhMBsL/LXzTTTbz2xhTJHkpGMOAVUB5YEakyWinx9c/CVid7fqayG15\nuR6YWMjnhkOvXjB9OmnPPht0kiOEsR3VMnkTxkwQzlyWyT/57umtqi8BL2W76adIM1JMiUgfXPNT\nh1i/dlxVrAj/+pcrHD//DE8+CccfH3QqY4w5ZvkWDBGpDAwG2kdumg4MAXZ4eP21uM2XompHbsv5\nHp2AB4EOqrov23NTczw3Lbc36d+/PykpKQAkJSXRokULUlPdU6OVPa7XS5Yk9fvv4ZZbSGvaFB54\ngNSbbw4uT+R6ampqoO+f2/XobWHJk/M3wbDkCev16G1hyWN/f3lfT0tLY8SIEQCZ35cF5aXT+33c\n6KiRkZv6As1V9fJ8X1ykFK7TuyOuAHwL9FbV77I95gxgPNBZVZdlu70qrqO7ZeSmubhO76053iNc\nnd45jRsHt94Kf/oTPPgglLZluIwxwfOr07uhqg6OdFz/qKp/BRp4eXFVzQBuAf4DLAHGRSb/DRGR\nbpGHPQNUAP4lIuki8nHkuVuBR3FF5ltgSM5iEWaZv+n06AHz5sE330DbtrB0afCZQsQyeRPGTBDO\nXJbJP/k2SQG/iUg7VZ0JICLnAr95fQNV/Qz4LMdtD2e73Okoz30TeNPre4VWcjJ8+in8859w3nnw\n0EPurKOEbY1ujEkcXpqkmgOjgMqRm7YB/VR1gc/ZPAl9k1ROy5dDv35QtqxbEr1u3aATGWOKoZg3\nSUWWAmmiqs2BZkAzVT0jLMUiITVqBDNmQKdObpLf229DIhU8Y0yxddSCoaqHgHsil3eqqtf5F8Xe\nUdssS5aE++93q9s+/bTbgGnTpmAzBcQyeRPGTBDOXJbJP14a0aeIyF0iUkdEqkYP35MVBy1awOzZ\n0LAhNG8OEyYEncgYY/LkpQ9jZS43q6p6Ginlt4Trw8jLl1+6vo2OHeH5590EQGOM8Ykvw2pVtX4u\nRyiKRZFy3nkwf77rz2je3BUQY4wJkTwLhoj0EZG+udzeV0R6+xsr8RWqzbJiRRg+HF58EXr2hHvu\ngX378n+en5l8Zpm8CWMmCGcuy+Sfo51h3Ap8mMvtHwB3+hPHANC1qzvbWL7cjaSaPz/oRMYYk3cf\nhojMVdWWedy3wMt+GPFQZPowcqPqht3edRfccQfcfbcbYWWMMcco1n0Y5SK77OV8k4pAmYKGM4Ug\nAtdc40ZSff45tG8PK1YEncoYU0wdrWC8AYzPsWVqCm4TpDf8jZX4YtpmWbcuTJni9gxv08YtMVKI\ns6owtqNaJm/CmAnCmcsy+SfPgqGqzwL/xm2atEVEtuCWNp+gqs/EK6CJKFECbrsNpk93BeOSS2D9\n+qBTGWOKkXznYUBmMxSqusv3RAVUpPsw8nLggNs3/LXX4JVX3JmHMcYUQGH6MDwVjDArlgUj6ptv\noG9faNUKXn4ZqlQJOpExJkH4tR+GKYS4tFm2bu322qhSxU32mzw5+EwFZJm8CWMmCGcuy+QfKxiJ\n7vjj3dnFG2/A9de7fTZ+/TXoVMaYIsjLWlJzcJsYjVHVbXFJVQDFukkqp23bXMH49ls3f6N166AT\nGWNCyq8mqZ5AMvCtiLwrIheJSIHexMRJlSowerTrEO/aFQYPdh3kxhgTA14WH1yuqg8CvwPG4M42\nfhKRv9oy53kLtM3yyishPd2dabRpA4sXB58pD5bJmzBmgnDmskz+8dSHISLNgOeAZ4D3gSuBncAX\n/kUzx6RWLbeP+IAB0KEDDB0Khw4FncoYk8C89mFsx83ufl9V92W77wNVvdzfiEdnfRgerFgB114L\na9e6jvFrr3UFxRhTbPm1p/f7qtpRVcdkLxYAQRcL41HDhm6G+LvvwqpVcMopcOmlboe/jIyg0xlj\nEoSXPb2tKBRC6NosRUjbs8ctK7J6NXTr5jrHU1Lg4YddIQlA6D4nLFNBhDGXZfKP7eldHFWo4Jqm\n/vtfmDgRduxw+25cdBGMHw/79wed0BgTQrant3F++w0++ABefx2WLHH7i19/PTRpEnQyY4wPbC0p\nExs//OBmjo8c6QrGjTfCFVdAuXJBJzPGxIhva0mJyGki0kNErokehYtYfISxzdJzpt/9Dp56Cn7+\nGQYOhHfegTp13CzyBQuCyRRHlsm7MOayTP7Jt2CIyGDg5chxPvA00M3nXCYMypRxZxYTJ8KcOVC1\nqtuH4+yzYfhw2BW61e6NMT7y0oexEGgOzFPV5iJSExitqhfGI2B+rEkqzg4ehEmTXMFIS4Pu3V2T\nVatWbktZY0xC8KtJ6rfI8NoMEakE/ALUKUxAUwSULOnOMj780C050qAB9OoFLVq4zZy2hW59SmNM\njHgpGLNFJAl4HZgDzAW+9jVVERDGNsuYZ6pVC+6/H5YtgxdegFmzoH59t6nTjBme9h0vFp9TDIQx\nE4Qzl2XyT6n8HqCq/xe5+JqITAIqqWpsez5NYitRAi64wB2bN7ul1W++2TVf3XCDG6Jbo0bQKY0x\nx8jrnt4nAfXIVmBUdYaPuTyzPoyQUoWvv3bzOj76CDp1cn0dnTq5AmOMCZQv8zBE5CncnhiLgYOR\nm1VVQzFSygpGAtixA8aOdcVjy5asBRBr1w46mTHFll+d3pcBTVS1i6p2jRyhKBZhFsY2y8AyVa7s\nmqjmzHGzydevh2bNoGtX0h57LHSbPNnfnXdhzGWZ/OOlYPwIlPY7iCkmWraEv//dLYB4xRXw3ntQ\nty7cd5/rPDfGhJaXJqn3cfMwpgKZy5ur6kB/o3ljTVJFwNKlbimSUaOgaVPXUX7FFXD88UEnM6bI\n8qsPo19ut6vqyIK8kV+sYBQh+/e7PTreeMOtpNuzp+vvaNnSJgUaE2O+9GGo6sjcjsLHLB7C2GYZ\n+kxlysDll7utZefPh+RkN5O8Zcu4TgoM/ecUImHMZZn8k2fBEJFxkT8XisiCnEf8IppiqXZteOgh\nt73ss89mTQq8+mqYNs32JzcmAHk2SYlILVVdLyL1crtfVX/yNZlH1iRVjGzZ4lbOHT4c9uxxzVX9\n+sFJJwWdzJiE4/t+GCJSDdgSpm9oKxjFkCrMnu36OsaNg3PPdcXjkkugtA3oM8aLmPZhiEgbEUkT\nkQ9E5AwRWQQsAjaKSOdjDVvUhbHNsshkEnGr4772mhue2707PPec27Pj3nvdBlDxzuSzMGaCcOay\nTP45Wqf3K8ATwFjgC+AGVT0RaA/8LQ7ZjMlf+fKuWerLL91y66rQvr07Ro50TVfGmJg4Wh9Guqq2\niFxeoqonZ7tvnqqeEaeMR2VNUuYIBw644bnDh7v1rHr0cHM7zjzThucaExHrYbXZh6H8luM++4Y2\n4VW6NPzxj2547oIFbsRVjx5uz46XX4atW4NOaExCOlrBaC4iO0VkF9Ascjl6/fQ45UtYYWyzLJaZ\nosNzly+H5593ZxwNGkDv3jB1aq7Dc4vl51RIYcxlmfyT534YqloynkGM8VWJEtCxozu2bnXDc++4\nw+1Lft110L+/rZ5rTD4KNKw2jKwPwxSaqltBd/hwNzz3nHNcX8cf/mDDc02R5/s8jDCygmFiYs8e\nGD/eze1YuNCNskpNdUezZm4vc2OKEL/2wzCFEMY2S8t0FNHhuTNmkPbGG24JkmXL3J/VqkG3bq4P\nZO5ct/VsnIXmc8ohjLksk3/y3dPbmGKnalV3ZtGjh7u+cSNMn+7meQwf7jaAOu886NDBPa5FCzsD\nMcWCNUkZU1AbN8KMGa6ApKXB2rWugESbsKyAmAQQyj6MyDIiLwIlgeGq+mSO+9sDQ4FmwFWqOj7b\nfQeBhZGrP+e2NawVDBO4vApI9jOQUnYyb8IldH0YIlISeBW4GDgF6CUip+R42M9Af2BMLi/xm6q2\niBwJtY94GNssLZM3Bc5UsyZceSW8+ip89x18/z1ccw2sXOmG61ar5kZePfusWzQxI8P/THESxlyW\nyT9+/9rTGliuqj8CiMi7wKXA4ugDVHVV5D7b4MAUDdECcuWV7vovv2SdgfTvD2vWQLt2WWcgZ5xh\nZyAmIfjaJCUi3YHOqnpD5Hpf4GxVvSWXx44AJuRoksoA0oEM4ElV/SiX51mTlEks2QtIWppbcbdd\nu6w+ECsgJg4K0yQV9n+V9VR1rYg0AL4QkYWquiLoUMYckxo13JLs3bu765s2ZRWQ666Dn38+/Ayk\nZUsrICYU/P5XuBaok+167chtnqjq2sifP4pIGnAGcETB6N+/PykpKQAkJSXRokULUlNTgay2w3hf\nj94W1Pvndj1ntqDzAAwdOjQUf1/Zr6enp3PbbbfF9/2vuAKuuMJd376d1IMHIS2NtJ493RnJqaeS\n2qkTaaVLQ6NGpPbuDSVLBv552d+ft+vR24L+/z9ixAiAzO/LgvK7SaoU8APQEVcovgV6q+p3uTx2\nBNmapESkCvCrqu6L7PT3NXCpqi7O8bxQNkmlpaVl/qWFhWXyJnSZNm0ibdgwUjMyYP58SE93ZyWn\nnw7Nm7tRWC1auOvly8c1Wug+KyyTV2EdVtsFN2y2JPCmqj4uIkOA2ar6sYi0Aj4EqgB7gQ2qeqqI\ntAWG4ZZZLwEMVdU3cnn9UBYMY3y1fbtbuj09PauILFnidh3MXkSaN4fkZNsHxBwhlAXDb1YwjIk4\ncMAN6U1PP7yQQFbxiP7ZtKktsFjMhW4eRnGWve0yLCyTNwmbqXRpOO006NPHzfmYPNn1f8yfD7ff\nDiecAJ984jrbK1d2OxBedx289JJb+mT7dn9yxZll8o8NvTCmKBNxTVLJydClS9bte/a4VXmjZyJj\nx7rr1asf2aSVkmJNWgawJiljTNTBg7BixeHNWfPnw+7dbon37EXk1FOhbNmgE5tjYH0YxpjY27TJ\nFY7sRWTZMmjUyG06dd557qhXz85EEoj1YYRIGNssLZM3limH6tWhUye48054+203OmvbNnjrLdKO\nOw4+/hjatIG6dd1e6f/4ByxalOt+6fFgf3/+sT4MY0zBlS0LZ53lmqtSU912t8uXw5dfulnrzz7r\nOtHbtcs6A2nZ0kZmJThrkjLG+GPdOldAosePP0Lr1lkFpE2buE80NFmsD8MYE17btsFXX2UVkPR0\nNwy4fXtXQNq1c7sdmriwPowQCWObpWXyxjJ5V6BcVarAJZfAk0/CrFmweTM8/TRUqgSvvOKG7552\nGvzpTzBmjFvF1+9McRLGTIVhfRjGmGCUK+dW5O3QwV3PyHBnHV9+CePHw6BBrsnqvPOyzkKaNLGR\nWAGyJiljTDipuqVOsveD7NlzeEe6bX9baNaHYYwp2tasyRqJ9eWXbu+QNm2yCsjZZ7szF5Mv68MI\nkTC2WVombyyTd3HPVbs29OqVNddj5Uq45RbYuRPuuw+qVyetSRO44QbXLzJzprsvYGH9+ysoO5cz\nxiSuE06Abt3cAfDrrzBiBJQo4fpDRo92haVWraylTaKHLfteYNYkZYwp2jIy3FIm0WXf09Nh3jx3\nX84i8rvfFZs+EevDMMYYL1Rh/frDi0h6Oqxd64b2Zi8ip58OFSoEnTjmrA8jRMLYZmmZvLFM3oUx\nl6dM0WXfu3SBBx6AcePghx9gwwZ44QW3Ou/cuTBwINSs6Ybz9uzp5pBMmuQeF+tMCaB4nHsZY4wX\nFStC27buiMrIyNrJcN48t07WvHluXazoWcgZZ7g/GzWCkiWDy+8za5IyxpiCUnXNV9n7RNLTYeNG\n14SVvZCcdhocf3zQiY9gfRjGGBOkHTvc8u/ZC8nSpW6J+OhRrVrul6PXk5LcKC+fWcEIkbS0NFJT\nU4OOcRjL5I1l8i6MuUKXaf9+0j74gNSGDd1mVJs3uz9zXo5e373bDRfOrZjkdbkQy8YXpmBYH4Yx\nxvipTBk48URo1crb4w8cyCokOQvKkiVulnv2ArNli1tz62hnLTkvF3JZeTvDMMaYRHbokNusKrez\nlbyuqyJ791qTlDHGmHzs2YNUqGDzMMIijOOuLZM3lsm7MOayTB4UsknKCoYxxhhPrEnKGGOKIVsa\nxBhjjG+sYPgkdG2WWCavLJN3YcxlmfxjBcMn6enpQUc4gmXyxjJ5F8Zclsk/VjB8sn379qAjHMEy\neWOZvAtjLsvkHysYxhhjPLGC4ZNVq1YFHeEIlskby+RdGHNZJv8UiWG1QWcwxphEVOyWBjHGGBMf\n1iRljDHGEysYxhhjPEnYgiEib4rILyKyKOgsUSJSR0SmichiEflORAaFIFNZEflGROZHMv016ExR\nIlJSROaJyISgs0SJyCoRWSgi6SIyO+g8ACKSJCLjRWSpiCwRkXMCztMk8vlEj50icluQmSK5bo/8\nG18kImNFpGwIMg2K5PkuyM8ot+9LEakqIpNFZFnkzyr5vU7CFgxgBNA56BA5ZAB3quopQBvgzyJy\nSsCZ9gEXqGpzoAXQWUTaBJwpahCwJOgQuThfVVuo6llBB4l4EZikqk2B5gT8manq95HPpwVwJvAr\n8GGQmUTkJGAgcJaqngaUBK4KONNpwI1Aa9zf2x9EpFFAcUZw5PflfcBUVW0MTI1cP6qELRiqOgPY\nGnSO7FR1varOjVzehfuPfVLAmVRVd0eulo4cgY90EJHawCXA8KCzhJmIVAbaA28AqOp+VQ3TLLCO\nwApV/SnoILgdRMuJSCngeGBdwHlOBv6nqr+qagYwHbg8iCB5fF9eCoyMXB4JXJbf6yRswQg7EUkB\nzgD+F2ySzKafdOAXYLKqBp4JGArcAxwKOkgOCnwuInNE5KagwwD1gU3AW5Hmu+EiUrjNDPxxFTA2\n6BCquhZ4FvgZWA/sUNXPg03FIuA8ETlBRI4HugB1As6UXU1VXR+5vAGomd8TrGD4QEQqAO8Dt6nq\nzqDzqOrBSPNBbaB15FQ5MCLyB+AXVZ0TZI48tFPVlsDFuCbF9gHnKQW0BP6hqmcAe/DQdBAPIlIG\n6Ab8KwRZquB+Y64PJAPlRaRPkJlUdQnwFPA5MAlIBw4GmSkvkT0i8m15sIIRYyJSGlcs3lHVD4LO\nk12kKWMawff9nAt0E5FVwLvABSIyOthITuQ3VVT1F1y7fOtgE7EGWJPtrHA8roCEwcXAXFXdGHQQ\noBOwUlU3qeoB4AOgbcCZUNU3VPVMVW0PbAN+CDpTNhtFpBZA5M9f8nuCFYwYEhHBtTUvUdXng84D\nICLVRSQpcrkccCGwNMhMqnq/qtZW1RRck8YXqhrob4MAIlJeRCpGLwO/xzUrBEZVNwCrRaRJ5KaO\nwOIAI2XXixA0R0X8DLQRkeMj/w87EoIBFSJSI/JnXVz/xZhgEx3mY6Bf5HI/4N/5PaGUr3F8JCJj\ngVSgmoisAQar6hvBpuJcoC+wMNJnAPCAqn4WYKZawEgRKYn7BWGcqoZmGGvI1AQ+dN83lALGqOqk\nYCMBcCvwTqQJ6Efg2oDzRAvqhcCAoLMAqOr/RGQ8MBc3WnEe8M9gUwHwvoicABwA/hzUgIXcvi+B\nJ4FxInI98BPQI9/XsaVBjDHGeGFNUsYYYzyxgmGMMcYTKxjGGGM8sYJhjDHGEysYxhhjPLGCYYwx\nxhMrGMYESERSw7S8uzFHYwXDGGOMJ1YwjPFARPpENqJKF5FhkRWAd4vIC5HNcaaKSPXIY1uIyH9F\nZIGIfBjdmEZEGonIlMhmVnNFpGHk5Stk2yDpncjSFsaEjhUMY/IhIicDPYFzI6v+HgSuBsoDs1X1\nVNxeB4MjTxkF3KuqzYCF2W5/B3g1splVW9wy3OCWwb8NOAVogFtixpjQSdi1pIyJo464neW+jfzy\nXw63such4L3IY0YDH0Q2PEpS1emR20cC/4osaniSqn4IoKp7ASKv942qrolcTwdSgJn+/1jGFIwV\nDGPyJ8BIVb3/sBtF/pLjcYVdmG1ftssHsf+XJqSsScqY/E0FumdbqrqqiNTD/f/pHnlMb2Cmqu4A\ntonIeZHb+wLTI1v2rhGRyyKvcVxkFzZjEob9JmNMPlR1sYg8hNu6tQSRpapxu9+1jtz3C66fA9ze\nAq9FCkL25cj7AsNEZEjkNa6M449hzDGz5c2NKSQR2a2qFYLOYUy8WJOUMcYYT+wMwxhjjCd2hmGM\nMcYTKxjGGGM8sYJhjDHGEysYxhhjPLGCYYwxxhMrGMYYYzz5fxXdtkyQUrY7AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots(1,1)\n",
    "ax.set_xlabel('epoch') ; ax.set_ylabel('Binary Crossentropy Loss')\n",
    "\n",
    "# list of epoch numbers\n",
    "x = list(range(1,10+1))\n",
    "\n",
    "vy = h.history['val_loss']\n",
    "ty = h.history['loss']\n",
    "plt_dynamic(x, vy, ty, ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YrZjna2UKnhB"
   },
   "outputs": [],
   "source": [
    "from prettytable import PrettyTable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = PrettyTable()\n",
    "x.field_names = [\"Embedding Vector length\", \"LSTM layers\", \"epochs\",\"Accuracy\"]\n",
    "\n",
    "x.add_row([100, 100, 10,'88.05%'])\n",
    "x.add_row([128, 192, 5,'90.79%'])\n",
    "x.add_row([92, 42, 10,'91.15%'])\n",
    "x.add_row([128, 64, 10,'90.98%'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------------------+-------------+--------+----------+\n",
      "| Embedding Vector length | LSTM layers | epochs | Accuracy |\n",
      "+-------------------------+-------------+--------+----------+\n",
      "|           100           |     100     |   10   |  88.05%  |\n",
      "|           128           |     192     |   5    |  90.79%  |\n",
      "|            92           |      42     |   10   |  91.15%  |\n",
      "|           128           |      64     |   10   |  90.98%  |\n",
      "+-------------------------+-------------+--------+----------+\n"
     ]
    }
   ],
   "source": [
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">The important part of this assignment is Data preprocessing converting the text data\n",
    "to LSTM series data.<br> \n",
    ">The Padding the data for Batch Performance. <br>\n",
    ">Then choosing the parameters. <br>\n",
    ">And, the final thing getting goo accuracy we got about 90% that is good.\n",
    "> We got the best accuracy of 91.15% with 92 embedding vector length and LSTM layers of 42"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "LSTM.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
